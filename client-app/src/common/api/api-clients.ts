/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class ApiAccountClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUser(store: string, language: string): Promise<User> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    updateAccount(userUpdateInfo: UserUpdateInfo | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userUpdateInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateAccount(_response);
        });
    }

    protected processUpdateAccount(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUserById(userId: string, store: string, language: string): Promise<User> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(userId: string, store: string, language: string): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(<any>null);
    }

    /**
     * @param organization (optional) 
     * @return Success
     */
    updateOrganization(organization: Organization | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/organization";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(organization);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateOrganization(_response);
        });
    }

    protected processUpdateOrganization(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param orgRegistration (optional) 
     * @return Success
     */
    registerOrganization(orgRegistration: OrganizationRegistration | null | undefined, store: string, language: string): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/organization";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(orgRegistration);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegisterOrganization(_response);
        });
    }

    protected processRegisterOrganization(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(<any>null);
    }

    /**
     * @param registration (optional) 
     * @return Success
     */
    registerUser(registration: OrganizationUserRegistration | null | undefined, store: string, language: string): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/user";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registration);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(<any>null);
    }

    createUserInvitation(invitation: UsersInvitation | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/invitation";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(invitation);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateUserInvitation(_response);
        });
    }

    protected processCreateUserInvitation(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCustomerOrganization(store: string, language: string): Promise<Organization> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/organization/current";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCustomerOrganization(_response);
        });
    }

    protected processGetCustomerOrganization(response: AxiosResponse): Promise<Organization> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Organization.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Organization>(<any>null);
    }

    /**
     * @param searchCriteria (optional) 
     * @return Success
     */
    searchOrganizationUsers(searchCriteria: OrganizationContactsSearchCriteria | null | undefined, store: string, language: string): Promise<UserSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/organization/users/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchCriteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchOrganizationUsers(_response);
        });
    }

    protected processSearchOrganizationUsers(response: AxiosResponse): Promise<UserSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserSearchResult.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    lockUser(userId: string, store: string, language: string): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/{userId}/lock";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLockUser(_response);
        });
    }

    protected processLockUser(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(<any>null);
    }

    /**
     * @return Success
     */
    unlockUser(userId: string, store: string, language: string): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/{userId}/unlock";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUnlockUser(_response);
        });
    }

    protected processUnlockUser(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(<any>null);
    }

    /**
     * @param formModel (optional) 
     * @return Success
     */
    changePassword(formModel: ChangePassword | null | undefined, store: string, language: string): Promise<PasswordChangeResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/password";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(formModel);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<PasswordChangeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PasswordChangeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PasswordChangeResult>(<any>null);
    }

    /**
     * @param addresses (optional) 
     * @return Success
     */
    updateAddresses(addresses: Address[] | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/addresses";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addresses);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateAddresses(_response);
        });
    }

    protected processUpdateAddresses(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    updatePhoneNumber(model: UpdatePhoneNumberModel | null | undefined, store: string, language: string): Promise<UpdatePhoneNumberResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/phonenumber";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdatePhoneNumber(_response);
        });
    }

    protected processUpdatePhoneNumber(response: AxiosResponse): Promise<UpdatePhoneNumberResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UpdatePhoneNumberResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdatePhoneNumberResult>(<any>null);
    }

    /**
     * @return Success
     */
    removePhoneNumber(store: string, language: string): Promise<RemovePhoneNumberResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/phonenumber";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemovePhoneNumber(_response);
        });
    }

    protected processRemovePhoneNumber(response: AxiosResponse): Promise<RemovePhoneNumberResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RemovePhoneNumberResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RemovePhoneNumberResult>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    changeTwoFactorAuthentication(model: ChangeTwoFactorAuthenticationModel | null | undefined, store: string, language: string): Promise<ChangeTwoFactorAuthenticationResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/account/twofactorauthentification";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeTwoFactorAuthentication(_response);
        });
    }

    protected processChangeTwoFactorAuthentication(response: AxiosResponse): Promise<ChangeTwoFactorAuthenticationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChangeTwoFactorAuthenticationResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChangeTwoFactorAuthenticationResult>(<any>null);
    }
}

export class ApiBlogClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param criteria (optional) 
     * @return Success
     */
    search(blogName: string, criteria: BlogSearchCriteria | null | undefined, store: string, language: string): Promise<BlogArticle[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/blog/{blogName}/search";
        if (blogName === undefined || blogName === null)
            throw new Error("The parameter 'blogName' must be defined.");
        url_ = url_.replace("{blogName}", encodeURIComponent("" + blogName)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: AxiosResponse): Promise<BlogArticle[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BlogArticle.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogArticle[]>(<any>null);
    }
}

export class ApiCartClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCart(store: string, language: string): Promise<ShoppingCart> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCart(_response);
        });
    }

    protected processGetCart(response: AxiosResponse): Promise<ShoppingCart> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCart.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCart>(<any>null);
    }

    /**
     * @param commentRequest (optional) 
     * @return Success
     */
    updateCartComment(commentRequest: UpdateCartCommentRequest | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/comment";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commentRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateCartComment(_response);
        });
    }

    protected processUpdateCartComment(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCartItemsCount(store: string, language: string): Promise<number> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/itemscount";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCartItemsCount(_response);
        });
    }

    protected processGetCartItemsCount(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param changeQty (optional) 
     * @return Success
     */
    changeCartItem(changeQty: ChangeCartItemQty | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/items";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changeQty);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeCartItem(_response);
        });
    }

    protected processChangeCartItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param cartItem (optional) 
     * @return Success
     */
    addItemToCart(cartItem: AddCartItem | null | undefined, store: string, language: string): Promise<ShoppingCartItems> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/items";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cartItem);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddItemToCart(_response);
        });
    }

    protected processAddItemToCart(response: AxiosResponse): Promise<ShoppingCartItems> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartItems.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartItems>(<any>null);
    }

    /**
     * @param lineItemId (optional) 
     * @return Success
     */
    removeCartItem(lineItemId: string | null | undefined, store: string, language: string): Promise<ShoppingCartItems> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/items?";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (lineItemId !== undefined)
            url_ += "lineItemId=" + encodeURIComponent("" + lineItemId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveCartItem(_response);
        });
    }

    protected processRemoveCartItem(response: AxiosResponse): Promise<ShoppingCartItems> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartItems.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartItems>(<any>null);
    }

    /**
     * @param newPrice (optional) 
     * @return Success
     */
    changeCartItemPrice(newPrice: ChangeCartItemPrice | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/items/price";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newPrice);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeCartItemPrice(_response);
        });
    }

    protected processChangeCartItemPrice(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearCart(store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/clear";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearCart(_response);
        });
    }

    protected processClearCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCartShipmentAvailShippingMethods(shipmentId: string, store: string, language: string): Promise<ShippingMethod[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/shipments/{shipmentId}/shippingmethods";
        if (shipmentId === undefined || shipmentId === null)
            throw new Error("The parameter 'shipmentId' must be defined.");
        url_ = url_.replace("{shipmentId}", encodeURIComponent("" + shipmentId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCartShipmentAvailShippingMethods(_response);
        });
    }

    protected processGetCartShipmentAvailShippingMethods(response: AxiosResponse): Promise<ShippingMethod[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShippingMethod.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShippingMethod[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCartAvailPaymentMethods(store: string, language: string): Promise<PaymentMethod[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/paymentmethods";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCartAvailPaymentMethods(_response);
        });
    }

    protected processGetCartAvailPaymentMethods(response: AxiosResponse): Promise<PaymentMethod[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PaymentMethod.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentMethod[]>(<any>null);
    }

    /**
     * @return Success
     */
    addCartCoupon(couponCode: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/coupons/{couponCode}";
        if (couponCode === undefined || couponCode === null)
            throw new Error("The parameter 'couponCode' must be defined.");
        url_ = url_.replace("{couponCode}", encodeURIComponent("" + couponCode)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddCartCoupon(_response);
        });
    }

    protected processAddCartCoupon(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param coupon (optional) 
     * @return Success
     */
    validateCoupon(coupon: Coupon | null | undefined, store: string, language: string): Promise<Coupon> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/coupons/validate";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(coupon);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processValidateCoupon(_response);
        });
    }

    protected processValidateCoupon(response: AxiosResponse): Promise<Coupon> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Coupon.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Coupon>(<any>null);
    }

    /**
     * @param couponCode (optional) 
     * @return Success
     */
    removeCartCoupon(couponCode: string | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/coupons?";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (couponCode !== undefined)
            url_ += "couponCode=" + encodeURIComponent("" + couponCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveCartCoupon(_response);
        });
    }

    protected processRemoveCartCoupon(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param paymentPlan (optional) 
     * @return Success
     */
    addOrUpdateCartPaymentPlan(paymentPlan: PaymentPlan | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/paymentPlan";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(paymentPlan);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddOrUpdateCartPaymentPlan(_response);
        });
    }

    protected processAddOrUpdateCartPaymentPlan(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteCartPaymentPlan(store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/paymentPlan";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteCartPaymentPlan(_response);
        });
    }

    protected processDeleteCartPaymentPlan(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param shipment (optional) 
     * @return Success
     */
    addOrUpdateCartShipment(shipment: CartShipment | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/shipments";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(shipment);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddOrUpdateCartShipment(_response);
        });
    }

    protected processAddOrUpdateCartShipment(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param payment (optional) 
     * @return Success
     */
    addOrUpdateCartPayment(payment: Payment | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/payments";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payment);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddOrUpdateCartPayment(_response);
        });
    }

    protected processAddOrUpdateCartPayment(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param bankCardInfo (optional) 
     * @return Success
     */
    createOrder(bankCardInfo: BankCardInfo | null | undefined, store: string, language: string): Promise<OrderCreatedInfo> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/cart/createorder";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bankCardInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrder(_response);
        });
    }

    protected processCreateOrder(response: AxiosResponse): Promise<OrderCreatedInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderCreatedInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderCreatedInfo>(<any>null);
    }
}

export class ApiCatalogClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param searchCriteria (optional) 
     * @return Success
     */
    searchProducts(searchCriteria: ProductSearchCriteria | null | undefined, store: string, language: string): Promise<SearchProductsResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/catalog/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchCriteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchProducts(_response);
        });
    }

    protected processSearchProducts(response: AxiosResponse): Promise<SearchProductsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SearchProductsResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SearchProductsResult>(<any>null);
    }

    /**
     * @param productIds (optional) 
     * @param respGroup (optional) 
     * @return Success
     */
    getProductsByIds(productIds: string[] | null | undefined, respGroup: RespGroup | null | undefined, store: string, language: string): Promise<Product[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/products?";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "productIds=" + encodeURIComponent("" + item) + "&"; });
        if (respGroup !== undefined)
            url_ += "respGroup=" + encodeURIComponent("" + respGroup) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProductsByIds(_response);
        });
    }

    protected processGetProductsByIds(response: AxiosResponse): Promise<Product[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product[]>(<any>null);
    }

    /**
     * @param searchCriteria (optional) 
     * @return Success
     */
    searchCategories(searchCriteria: CategorySearchCriteria | null | undefined, store: string, language: string): Promise<SearchCategoriesResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/categories/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchCriteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchCategories(_response);
        });
    }

    protected processSearchCategories(response: AxiosResponse): Promise<SearchCategoriesResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SearchCategoriesResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SearchCategoriesResult>(<any>null);
    }

    /**
     * @param categoryIds (optional) 
     * @param respGroup (optional) 
     * @return Success
     */
    getCategoriesByIds(categoryIds: string[] | null | undefined, respGroup: RespGroup2 | null | undefined, store: string, language: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/categories?";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (categoryIds !== undefined)
            categoryIds && categoryIds.forEach(item => { url_ += "categoryIds=" + encodeURIComponent("" + item) + "&"; });
        if (respGroup !== undefined)
            url_ += "respGroup=" + encodeURIComponent("" + respGroup) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCategoriesByIds(_response);
        });
    }

    protected processGetCategoriesByIds(response: AxiosResponse): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Category[]>(<any>null);
    }
}

export class ApiCommonClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCountries(store: string, language: string): Promise<Country[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/countries";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCountries(_response);
        });
    }

    protected processGetCountries(response: AxiosResponse): Promise<Country[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Country.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Country[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCountryRegions(countryCode: string, store: string, language: string): Promise<CountryRegion[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/countries/{countryCode}/regions";
        if (countryCode === undefined || countryCode === null)
            throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCountryRegions(_response);
        });
    }

    protected processGetCountryRegions(response: AxiosResponse): Promise<CountryRegion[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CountryRegion.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CountryRegion[]>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    feedback(model: ContactForm | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/feedback";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFeedback(_response);
        });
    }

    protected processFeedback(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ApiInventoryClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param criteria (optional) 
     * @return Success
     */
    searchFulfillmentCenters(criteria: FulfillmentCenterSearchCriteria | null | undefined, store: string, language: string): Promise<FulfillmentCenterSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/fulfillmentcenters/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchFulfillmentCenters(_response);
        });
    }

    protected processSearchFulfillmentCenters(response: AxiosResponse): Promise<FulfillmentCenterSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FulfillmentCenterSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FulfillmentCenterSearchResult>(<any>null);
    }
}

export class ApiListsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getListByName(listName: string, type: string, store: string, language: string): Promise<ShoppingCart> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}";
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetListByName(_response);
        });
    }

    protected processGetListByName(response: AxiosResponse): Promise<ShoppingCart> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCart.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCart>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getListsWithProduct(request: GetCartsWithProductRequest | null | undefined, store: string, language: string): Promise<string[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/getlistswithproduct";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetListsWithProduct(_response);
        });
    }

    protected processGetListsWithProduct(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * @param listItem (optional) 
     * @return Success
     */
    addItemToList(listItem: AddCartItem | null | undefined, store: string, language: string): Promise<ShoppingCartItems> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/items";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItem);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddItemToList(_response);
        });
    }

    protected processAddItemToList(response: AxiosResponse): Promise<ShoppingCartItems> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartItems.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartItems>(<any>null);
    }

    /**
     * @return Success
     */
    removeItemFromList(lineItemId: string, listName: string, type: string, store: string, language: string): Promise<ShoppingCartItems> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}/items/{lineItemId}";
        if (lineItemId === undefined || lineItemId === null)
            throw new Error("The parameter 'lineItemId' must be defined.");
        url_ = url_.replace("{lineItemId}", encodeURIComponent("" + lineItemId)); 
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveItemFromList(_response);
        });
    }

    protected processRemoveItemFromList(response: AxiosResponse): Promise<ShoppingCartItems> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartItems.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartItems>(<any>null);
    }

    /**
     * @param changeQty (optional) 
     * @return Success
     */
    changeListItem(listName: string, type: string, changeQty: ChangeCartItemQty | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}/items";
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changeQty);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeListItem(_response);
        });
    }

    protected processChangeListItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearList(listName: string, type: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}/clear";
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearList(_response);
        });
    }

    protected processClearList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param searchCriteria (optional) 
     * @return Success
     */
    searchLists(searchCriteria: CartSearchCriteria | null | undefined, store: string, language: string): Promise<ShoppingCartSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchCriteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchLists(_response);
        });
    }

    protected processSearchLists(response: AxiosResponse): Promise<ShoppingCartSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    createList(listName: string, type: string, store: string, language: string): Promise<ShoppingCart> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}/create";
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateList(_response);
        });
    }

    protected processCreateList(response: AxiosResponse): Promise<ShoppingCart> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCart.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCart>(<any>null);
    }

    /**
     * @param listIds (optional) 
     * @return Success
     */
    deleteListsByIds(listIds: string[] | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/deletelistsbyids?";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (listIds !== undefined)
            listIds && listIds.forEach(item => { url_ += "listIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteListsByIds(_response);
        });
    }

    protected processDeleteListsByIds(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    mergeWithCurrentCart(listName: string, type: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/lists/{listName}/{type}/mergewithcurrentcart";
        if (listName === undefined || listName === null)
            throw new Error("The parameter 'listName' must be defined.");
        url_ = url_.replace("{listName}", encodeURIComponent("" + listName)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMergeWithCurrentCart(_response);
        });
    }

    protected processMergeWithCurrentCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ApiMarketingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDynamicContent(placeName: string, store: string, language: string): Promise<string> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/marketing/dynamiccontent/{placeName}";
        if (placeName === undefined || placeName === null)
            throw new Error("The parameter 'placeName' must be defined.");
        url_ = url_.replace("{placeName}", encodeURIComponent("" + placeName)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetDynamicContent(_response);
        });
    }

    protected processGetDynamicContent(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class ApiOrderClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param criteria (optional) 
     * @return Success
     */
    searchPayments(criteria: PaymentSearchCriteria | null | undefined, store: string, language: string): Promise<PaymentSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/payments/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchPayments(_response);
        });
    }

    protected processSearchPayments(response: AxiosResponse): Promise<PaymentSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaymentSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentSearchResult>(<any>null);
    }

    /**
     * @param criteria (optional) 
     * @return Success
     */
    searchCustomerOrders(criteria: OrderSearchCriteria | null | undefined, store: string, language: string): Promise<CustomerOrderSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchCustomerOrders(_response);
        });
    }

    protected processSearchCustomerOrders(response: AxiosResponse): Promise<CustomerOrderSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustomerOrderSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerOrderSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getCustomerOrder(orderNumber: string, store: string, language: string): Promise<CustomerOrder> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCustomerOrder(_response);
        });
    }

    protected processGetCustomerOrder(response: AxiosResponse): Promise<CustomerOrder> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustomerOrder.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerOrder>(<any>null);
    }

    /**
     * @return Success
     */
    getNewPaymentData(orderNumber: string, store: string, language: string): Promise<NewPaymentData> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/newpaymentdata";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetNewPaymentData(_response);
        });
    }

    protected processGetNewPaymentData(response: AxiosResponse): Promise<NewPaymentData> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewPaymentData.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewPaymentData>(<any>null);
    }

    /**
     * @return Success
     */
    cancelPayment(orderNumber: string, paymentNumber: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/payments/{paymentNumber}/cancel";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (paymentNumber === undefined || paymentNumber === null)
            throw new Error("The parameter 'paymentNumber' must be defined.");
        url_ = url_.replace("{paymentNumber}", encodeURIComponent("" + paymentNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCancelPayment(_response);
        });
    }

    protected processCancelPayment(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param bankCardInfo (optional) 
     * @return Success
     */
    processOrderPayment(orderNumber: string, paymentNumber: string, bankCardInfo: BankCardInfo | null | undefined, store: string, language: string): Promise<ProcessOrderPaymentResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/payments/{paymentNumber}/process";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (paymentNumber === undefined || paymentNumber === null)
            throw new Error("The parameter 'paymentNumber' must be defined.");
        url_ = url_.replace("{paymentNumber}", encodeURIComponent("" + paymentNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bankCardInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processProcessOrderPayment(_response);
        });
    }

    protected processProcessOrderPayment(response: AxiosResponse): Promise<ProcessOrderPaymentResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProcessOrderPaymentResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProcessOrderPaymentResult>(<any>null);
    }

    /**
     * @param payment (optional) 
     * @return Success
     */
    addOrUpdateOrderPayment(orderNumber: string, payment: PaymentIn | null | undefined, store: string, language: string): Promise<PaymentIn> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/payments";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payment);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddOrUpdateOrderPayment(_response);
        });
    }

    protected processAddOrUpdateOrderPayment(response: AxiosResponse): Promise<PaymentIn> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaymentIn.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentIn>(<any>null);
    }

    /**
     * @return OK
     */
    getInvoicePdf(orderNumber: string, store: string, language: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/invoice";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetInvoicePdf(_response);
        });
    }

    protected processGetInvoicePdf(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param changeOrderStatus (optional) 
     * @return Success
     */
    changeOrderStatus(orderNumber: string, changeOrderStatus: ChangeOrderStatus | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/orders/{orderNumber}/status";
        if (orderNumber === undefined || orderNumber === null)
            throw new Error("The parameter 'orderNumber' must be defined.");
        url_ = url_.replace("{orderNumber}", encodeURIComponent("" + orderNumber)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changeOrderStatus);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeOrderStatus(_response);
        });
    }

    protected processChangeOrderStatus(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ApiPricingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param products (optional) 
     * @return Success
     */
    getActualProductPrices(products: Product[] | null | undefined, store: string, language: string): Promise<ProductPrice[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/pricing/actualprices";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(products);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetActualProductPrices(_response);
        });
    }

    protected processGetActualProductPrices(response: AxiosResponse): Promise<ProductPrice[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductPrice.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductPrice[]>(<any>null);
    }
}

export class ApiQuoteRequestClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param criteria (optional) 
     * @return Success
     */
    quoteSearch(criteria: QuoteSearchCriteria | null | undefined, store: string, language: string): Promise<QuoteSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processQuoteSearch(_response);
        });
    }

    protected processQuoteSearch(response: AxiosResponse): Promise<QuoteSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getItemsCount(number: string, store: string, language: string): Promise<QuoteItemsCount> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/itemscount";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetItemsCount(_response);
        });
    }

    protected processGetItemsCount(response: AxiosResponse): Promise<QuoteItemsCount> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteItemsCount.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteItemsCount>(<any>null);
    }

    /**
     * @return Success
     */
    get(number: string, store: string, language: string): Promise<QuoteRequest> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<QuoteRequest> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteRequest.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteRequest>(<any>null);
    }

    /**
     * @param quoteRequest (optional) 
     * @return Success
     */
    update(number: string, quoteRequest: QuoteRequestFormModel | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quoteRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrent(store: string, language: string): Promise<QuoteRequest> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequest/current";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCurrent(_response);
        });
    }

    protected processGetCurrent(response: AxiosResponse): Promise<QuoteRequest> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteRequest.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteRequest>(<any>null);
    }

    /**
     * @param addQuoteItem (optional) 
     * @return Success
     */
    addItem(addQuoteItem: AddQuoteItem | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/current/items";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addQuoteItem);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddItem(_response);
        });
    }

    protected processAddItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    removeItem(number: string, itemId: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/items/{itemId}";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveItem(_response);
        });
    }

    protected processRemoveItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param quoteForm (optional) 
     * @return Success
     */
    submit(number: string, quoteForm: QuoteRequestFormModel | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/submit";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quoteForm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSubmit(_response);
        });
    }

    protected processSubmit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    reject(number: string, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/reject";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processReject(_response);
        });
    }

    protected processReject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param quoteRequest (optional) 
     * @return Success
     */
    calculateTotals(number: string, quoteRequest: QuoteRequestFormModel | null | undefined, store: string, language: string): Promise<QuoteRequestTotals> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/totals";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quoteRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCalculateTotals(_response);
        });
    }

    protected processCalculateTotals(response: AxiosResponse): Promise<QuoteRequestTotals> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteRequestTotals.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteRequestTotals>(<any>null);
    }

    /**
     * @param quoteRequest (optional) 
     * @return Success
     */
    confirm(number: string, quoteRequest: QuoteRequestFormModel | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/quoterequests/{number}/confirm";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quoteRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processConfirm(_response);
        });
    }

    protected processConfirm(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ApiRecommendationsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param evalContext (optional) 
     * @return Success
     */
    getRecommendations(evalContext: RecommendationEvalContext | null | undefined, store: string, language: string): Promise<Product[]> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/recommendations";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(evalContext);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRecommendations(_response);
        });
    }

    protected processGetRecommendations(response: AxiosResponse): Promise<Product[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product[]>(<any>null);
    }
}

export class ApiSubscriptionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param searchCriteria (optional) 
     * @return Success
     */
    searchCustomerSubscriptions(searchCriteria: SubscriptionSearchCriteria | null | undefined, store: string, language: string): Promise<SubscriptionSearchResult> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/subscriptions/search";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchCriteria);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchCustomerSubscriptions(_response);
        });
    }

    protected processSearchCustomerSubscriptions(response: AxiosResponse): Promise<SubscriptionSearchResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SubscriptionSearchResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubscriptionSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getCustomerSubscription(number: string, store: string, language: string): Promise<Subscription> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/subscriptions/{number}";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCustomerSubscription(_response);
        });
    }

    protected processGetCustomerSubscription(response: AxiosResponse): Promise<Subscription> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Subscription.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Subscription>(<any>null);
    }

    /**
     * @param cancelRequest (optional) 
     * @return Success
     */
    cancelSubscription(cancelRequest: SubscriptionCancelRequest | null | undefined, store: string, language: string, number: string): Promise<Subscription> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/subscriptions/{number}/cancel";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cancelRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCancelSubscription(_response);
        });
    }

    protected processCancelSubscription(response: AxiosResponse): Promise<Subscription> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Subscription.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Subscription>(<any>null);
    }
}

export class ApiUserActionsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param userSession (optional) 
     * @return Success
     */
    saveEventInfo(userSession: UserSession | null | undefined, store: string, language: string): Promise<void> {
        let url_ = this.baseUrl + "/{store}/{language}/storefrontapi/useractions/eventinfo";
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined.");
        url_ = url_.replace("{store}", encodeURIComponent("" + store)); 
        if (language === undefined || language === null)
            throw new Error("The parameter 'language' must be defined.");
        url_ = url_.replace("{language}", encodeURIComponent("" + language)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userSession);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSaveEventInfo(_response);
        });
    }

    protected processSaveEventInfo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class User implements IUser {
    storeId?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    defaultLanguage?: string | undefined;
    twoFactorEnabled?: boolean | undefined;
    twoFactorAuthenticatorKey?: string | undefined;
    readonly isLockedOut?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnabled?: boolean | undefined;
    lockoutEndDateUtc?: Date | undefined;
    isRegisteredUser?: boolean | undefined;
    isAdministrator?: boolean | undefined;
    userType?: string | undefined;
    userState?: UserState | undefined;
    operatorUserId?: string | undefined;
    operatorUserName?: string | undefined;
    externalLogins?: ExternalUserLoginInfo[] | undefined;
    selectedCurrencyCode?: string | undefined;
    contactId?: string | undefined;
    contact?: Contact | undefined;
    permissions?: string[] | undefined;
    readonly role?: Role | undefined;
    roles?: Role[] | undefined;
    readonly dynamicProperties?: DynamicProperty[] | undefined;
    readonly firstName?: string | undefined;
    readonly lastName?: string | undefined;
    readonly middleName?: string | undefined;
    readonly name?: string | undefined;
    readonly timeZone?: string | undefined;
    readonly defaultAddress?: Address | undefined;
    readonly defaultBillingAddress?: Address | undefined;
    readonly defaultShippingAddress?: Address | undefined;
    readonly addresses?: Address[] | undefined;
    isFirstTimeBuyer?: boolean | undefined;
    id?: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.storeId = _data["storeId"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.defaultLanguage = _data["defaultLanguage"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.twoFactorAuthenticatorKey = _data["twoFactorAuthenticatorKey"];
            (<any>this).isLockedOut = _data["isLockedOut"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.lockoutEndDateUtc = _data["lockoutEndDateUtc"] ? new Date(_data["lockoutEndDateUtc"].toString()) : <any>undefined;
            this.isRegisteredUser = _data["isRegisteredUser"];
            this.isAdministrator = _data["isAdministrator"];
            this.userType = _data["userType"];
            this.userState = _data["userState"];
            this.operatorUserId = _data["operatorUserId"];
            this.operatorUserName = _data["operatorUserName"];
            if (Array.isArray(_data["externalLogins"])) {
                this.externalLogins = [] as any;
                for (let item of _data["externalLogins"])
                    this.externalLogins!.push(ExternalUserLoginInfo.fromJS(item));
            }
            this.selectedCurrencyCode = _data["selectedCurrencyCode"];
            this.contactId = _data["contactId"];
            this.contact = _data["contact"] ? Contact.fromJS(_data["contact"]) : <any>undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            (<any>this).role = _data["role"] ? Role.fromJS(_data["role"]) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(Role.fromJS(item));
            }
            if (Array.isArray(_data["dynamicProperties"])) {
                (<any>this).dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    (<any>this).dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            (<any>this).firstName = _data["firstName"];
            (<any>this).lastName = _data["lastName"];
            (<any>this).middleName = _data["middleName"];
            (<any>this).name = _data["name"];
            (<any>this).timeZone = _data["timeZone"];
            (<any>this).defaultAddress = _data["defaultAddress"] ? Address.fromJS(_data["defaultAddress"]) : <any>undefined;
            (<any>this).defaultBillingAddress = _data["defaultBillingAddress"] ? Address.fromJS(_data["defaultBillingAddress"]) : <any>undefined;
            (<any>this).defaultShippingAddress = _data["defaultShippingAddress"] ? Address.fromJS(_data["defaultShippingAddress"]) : <any>undefined;
            if (Array.isArray(_data["addresses"])) {
                (<any>this).addresses = [] as any;
                for (let item of _data["addresses"])
                    (<any>this).addresses!.push(Address.fromJS(item));
            }
            this.isFirstTimeBuyer = _data["isFirstTimeBuyer"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["defaultLanguage"] = this.defaultLanguage;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["twoFactorAuthenticatorKey"] = this.twoFactorAuthenticatorKey;
        data["isLockedOut"] = this.isLockedOut;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["isRegisteredUser"] = this.isRegisteredUser;
        data["isAdministrator"] = this.isAdministrator;
        data["userType"] = this.userType;
        data["userState"] = this.userState;
        data["operatorUserId"] = this.operatorUserId;
        data["operatorUserName"] = this.operatorUserName;
        if (Array.isArray(this.externalLogins)) {
            data["externalLogins"] = [];
            for (let item of this.externalLogins)
                data["externalLogins"].push(item.toJSON());
        }
        data["selectedCurrencyCode"] = this.selectedCurrencyCode;
        data["contactId"] = this.contactId;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["name"] = this.name;
        data["timeZone"] = this.timeZone;
        data["defaultAddress"] = this.defaultAddress ? this.defaultAddress.toJSON() : <any>undefined;
        data["defaultBillingAddress"] = this.defaultBillingAddress ? this.defaultBillingAddress.toJSON() : <any>undefined;
        data["defaultShippingAddress"] = this.defaultShippingAddress ? this.defaultShippingAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["isFirstTimeBuyer"] = this.isFirstTimeBuyer;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUser {
    storeId?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    defaultLanguage?: string | undefined;
    twoFactorEnabled?: boolean | undefined;
    twoFactorAuthenticatorKey?: string | undefined;
    isLockedOut?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnabled?: boolean | undefined;
    lockoutEndDateUtc?: Date | undefined;
    isRegisteredUser?: boolean | undefined;
    isAdministrator?: boolean | undefined;
    userType?: string | undefined;
    userState?: UserState | undefined;
    operatorUserId?: string | undefined;
    operatorUserName?: string | undefined;
    externalLogins?: ExternalUserLoginInfo[] | undefined;
    selectedCurrencyCode?: string | undefined;
    contactId?: string | undefined;
    contact?: Contact | undefined;
    permissions?: string[] | undefined;
    role?: Role | undefined;
    roles?: Role[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    name?: string | undefined;
    timeZone?: string | undefined;
    defaultAddress?: Address | undefined;
    defaultBillingAddress?: Address | undefined;
    defaultShippingAddress?: Address | undefined;
    addresses?: Address[] | undefined;
    isFirstTimeBuyer?: boolean | undefined;
    id?: string | undefined;
}

export class ExternalUserLoginInfo implements IExternalUserLoginInfo {
    loginProvider?: string | undefined;
    providerKey?: string | undefined;
    providerDisplayName?: string | undefined;

    constructor(data?: IExternalUserLoginInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginProvider = _data["loginProvider"];
            this.providerKey = _data["providerKey"];
            this.providerDisplayName = _data["providerDisplayName"];
        }
    }

    static fromJS(data: any): ExternalUserLoginInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalUserLoginInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["providerDisplayName"] = this.providerDisplayName;
        return data; 
    }
}

export interface IExternalUserLoginInfo {
    loginProvider?: string | undefined;
    providerKey?: string | undefined;
    providerDisplayName?: string | undefined;
}

export class Contact implements IContact {
    fullName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    salutation?: string | undefined;
    photoUrl?: string | undefined;
    timeZone?: string | undefined;
    defaultLanguage?: string | undefined;
    defaultBillingAddress?: Address | undefined;
    defaultShippingAddress?: Address | undefined;
    organizationId?: string | undefined;
    organization?: Organization | undefined;
    organizationsIds?: string[] | undefined;
    acceptsMarketing?: boolean | undefined;
    defaultAddress?: Address | undefined;
    securityAccounts?: SecurityAccount[] | undefined;
    phoneNumbers?: string[] | undefined;
    readonly email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;

    constructor(data?: IContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.salutation = _data["salutation"];
            this.photoUrl = _data["photoUrl"];
            this.timeZone = _data["timeZone"];
            this.defaultLanguage = _data["defaultLanguage"];
            this.defaultBillingAddress = _data["defaultBillingAddress"] ? Address.fromJS(_data["defaultBillingAddress"]) : <any>undefined;
            this.defaultShippingAddress = _data["defaultShippingAddress"] ? Address.fromJS(_data["defaultShippingAddress"]) : <any>undefined;
            this.organizationId = _data["organizationId"];
            this.organization = _data["organization"] ? Organization.fromJS(_data["organization"]) : <any>undefined;
            if (Array.isArray(_data["organizationsIds"])) {
                this.organizationsIds = [] as any;
                for (let item of _data["organizationsIds"])
                    this.organizationsIds!.push(item);
            }
            this.acceptsMarketing = _data["acceptsMarketing"];
            this.defaultAddress = _data["defaultAddress"] ? Address.fromJS(_data["defaultAddress"]) : <any>undefined;
            if (Array.isArray(_data["securityAccounts"])) {
                this.securityAccounts = [] as any;
                for (let item of _data["securityAccounts"])
                    this.securityAccounts!.push(SecurityAccount.fromJS(item));
            }
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(item);
            }
            (<any>this).email = _data["email"];
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(item);
            }
            this.name = _data["name"];
            this.memberType = _data["memberType"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phones"])) {
                this.phones = [] as any;
                for (let item of _data["phones"])
                    this.phones!.push(item);
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(item);
            }
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Contact {
        data = typeof data === 'object' ? data : {};
        let result = new Contact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["salutation"] = this.salutation;
        data["photoUrl"] = this.photoUrl;
        data["timeZone"] = this.timeZone;
        data["defaultLanguage"] = this.defaultLanguage;
        data["defaultBillingAddress"] = this.defaultBillingAddress ? this.defaultBillingAddress.toJSON() : <any>undefined;
        data["defaultShippingAddress"] = this.defaultShippingAddress ? this.defaultShippingAddress.toJSON() : <any>undefined;
        data["organizationId"] = this.organizationId;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        if (Array.isArray(this.organizationsIds)) {
            data["organizationsIds"] = [];
            for (let item of this.organizationsIds)
                data["organizationsIds"].push(item);
        }
        data["acceptsMarketing"] = this.acceptsMarketing;
        data["defaultAddress"] = this.defaultAddress ? this.defaultAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.securityAccounts)) {
            data["securityAccounts"] = [];
            for (let item of this.securityAccounts)
                data["securityAccounts"].push(item.toJSON());
        }
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item);
        }
        data["email"] = this.email;
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item);
        }
        data["name"] = this.name;
        data["memberType"] = this.memberType;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phones)) {
            data["phones"] = [];
            for (let item of this.phones)
                data["phones"].push(item);
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item);
        }
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IContact {
    fullName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    salutation?: string | undefined;
    photoUrl?: string | undefined;
    timeZone?: string | undefined;
    defaultLanguage?: string | undefined;
    defaultBillingAddress?: Address | undefined;
    defaultShippingAddress?: Address | undefined;
    organizationId?: string | undefined;
    organization?: Organization | undefined;
    organizationsIds?: string[] | undefined;
    acceptsMarketing?: boolean | undefined;
    defaultAddress?: Address | undefined;
    securityAccounts?: SecurityAccount[] | undefined;
    phoneNumbers?: string[] | undefined;
    email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;
}

export class Role implements IRole {
    name?: string | undefined;
    permissions?: string[] | undefined;
    id?: string | undefined;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IRole {
    name?: string | undefined;
    permissions?: string[] | undefined;
    id?: string | undefined;
}

export class DynamicProperty implements IDynamicProperty {
    name?: string | undefined;
    displayName?: LocalizedString | undefined;
    displayNames?: LocalizedString[] | undefined;
    isArray?: boolean | undefined;
    isDictionary?: boolean | undefined;
    isRequired?: boolean | undefined;
    valueType?: string | undefined;
    values?: LocalizedString[] | undefined;
    dictionaryValues?: DynamicPropertyDictionaryItem[] | undefined;
    dictionaryItems?: DynamicPropertyDictionaryItem[] | undefined;
    readonly indexKey?: string | undefined;
    id?: string | undefined;

    constructor(data?: IDynamicProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"] ? LocalizedString.fromJS(_data["displayName"]) : <any>undefined;
            if (Array.isArray(_data["displayNames"])) {
                this.displayNames = [] as any;
                for (let item of _data["displayNames"])
                    this.displayNames!.push(LocalizedString.fromJS(item));
            }
            this.isArray = _data["isArray"];
            this.isDictionary = _data["isDictionary"];
            this.isRequired = _data["isRequired"];
            this.valueType = _data["valueType"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(LocalizedString.fromJS(item));
            }
            if (Array.isArray(_data["dictionaryValues"])) {
                this.dictionaryValues = [] as any;
                for (let item of _data["dictionaryValues"])
                    this.dictionaryValues!.push(DynamicPropertyDictionaryItem.fromJS(item));
            }
            if (Array.isArray(_data["dictionaryItems"])) {
                this.dictionaryItems = [] as any;
                for (let item of _data["dictionaryItems"])
                    this.dictionaryItems!.push(DynamicPropertyDictionaryItem.fromJS(item));
            }
            (<any>this).indexKey = _data["indexKey"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DynamicProperty {
        data = typeof data === 'object' ? data : {};
        let result = new DynamicProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName ? this.displayName.toJSON() : <any>undefined;
        if (Array.isArray(this.displayNames)) {
            data["displayNames"] = [];
            for (let item of this.displayNames)
                data["displayNames"].push(item.toJSON());
        }
        data["isArray"] = this.isArray;
        data["isDictionary"] = this.isDictionary;
        data["isRequired"] = this.isRequired;
        data["valueType"] = this.valueType;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        if (Array.isArray(this.dictionaryValues)) {
            data["dictionaryValues"] = [];
            for (let item of this.dictionaryValues)
                data["dictionaryValues"].push(item.toJSON());
        }
        if (Array.isArray(this.dictionaryItems)) {
            data["dictionaryItems"] = [];
            for (let item of this.dictionaryItems)
                data["dictionaryItems"].push(item.toJSON());
        }
        data["indexKey"] = this.indexKey;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDynamicProperty {
    name?: string | undefined;
    displayName?: LocalizedString | undefined;
    displayNames?: LocalizedString[] | undefined;
    isArray?: boolean | undefined;
    isDictionary?: boolean | undefined;
    isRequired?: boolean | undefined;
    valueType?: string | undefined;
    values?: LocalizedString[] | undefined;
    dictionaryValues?: DynamicPropertyDictionaryItem[] | undefined;
    dictionaryItems?: DynamicPropertyDictionaryItem[] | undefined;
    indexKey?: string | undefined;
    id?: string | undefined;
}

export class Address implements IAddress {
    type?: AddressType | undefined;
    key?: string | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    countryCode?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    zip?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    regionId?: string | undefined;
    regionName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    readonly id?: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.key = _data["key"];
            this.name = _data["name"];
            this.organization = _data["organization"];
            this.countryCode = _data["countryCode"];
            this.countryName = _data["countryName"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.zip = _data["zip"];
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.regionId = _data["regionId"];
            this.regionName = _data["regionName"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            (<any>this).id = _data["id"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["key"] = this.key;
        data["name"] = this.name;
        data["organization"] = this.organization;
        data["countryCode"] = this.countryCode;
        data["countryName"] = this.countryName;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["zip"] = this.zip;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["regionId"] = this.regionId;
        data["regionName"] = this.regionName;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAddress {
    type?: AddressType | undefined;
    key?: string | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    countryCode?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    zip?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    regionId?: string | undefined;
    regionName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    id?: string | undefined;
}

export class Organization implements IOrganization {
    phoneNumbers?: string[] | undefined;
    readonly email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;

    constructor(data?: IOrganization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(item);
            }
            (<any>this).email = _data["email"];
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(item);
            }
            this.name = _data["name"];
            this.memberType = _data["memberType"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phones"])) {
                this.phones = [] as any;
                for (let item of _data["phones"])
                    this.phones!.push(item);
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(item);
            }
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Organization {
        data = typeof data === 'object' ? data : {};
        let result = new Organization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item);
        }
        data["email"] = this.email;
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item);
        }
        data["name"] = this.name;
        data["memberType"] = this.memberType;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phones)) {
            data["phones"] = [];
            for (let item of this.phones)
                data["phones"].push(item);
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item);
        }
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganization {
    phoneNumbers?: string[] | undefined;
    email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;
}

export class SecurityAccount implements ISecurityAccount {
    userName?: string | undefined;
    isLockedOut?: boolean | undefined;
    roles?: string[] | undefined;
    id?: string | undefined;

    constructor(data?: ISecurityAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.isLockedOut = _data["isLockedOut"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SecurityAccount {
        data = typeof data === 'object' ? data : {};
        let result = new SecurityAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["isLockedOut"] = this.isLockedOut;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ISecurityAccount {
    userName?: string | undefined;
    isLockedOut?: boolean | undefined;
    roles?: string[] | undefined;
    id?: string | undefined;
}

export class LocalizedString implements ILocalizedString {
    value?: string | undefined;
    language?: Language | undefined;

    constructor(data?: ILocalizedString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LocalizedString {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILocalizedString {
    value?: string | undefined;
    language?: Language | undefined;
}

export class DynamicPropertyDictionaryItem implements IDynamicPropertyDictionaryItem {
    propertyId?: string | undefined;
    name?: string | undefined;
    displayName?: string | undefined;
    displayNames?: LocalizedString[] | undefined;
    id?: string | undefined;

    constructor(data?: IDynamicPropertyDictionaryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyId = _data["propertyId"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["displayNames"])) {
                this.displayNames = [] as any;
                for (let item of _data["displayNames"])
                    this.displayNames!.push(LocalizedString.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DynamicPropertyDictionaryItem {
        data = typeof data === 'object' ? data : {};
        let result = new DynamicPropertyDictionaryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyId"] = this.propertyId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.displayNames)) {
            data["displayNames"] = [];
            for (let item of this.displayNames)
                data["displayNames"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IDynamicPropertyDictionaryItem {
    propertyId?: string | undefined;
    name?: string | undefined;
    displayName?: string | undefined;
    displayNames?: LocalizedString[] | undefined;
    id?: string | undefined;
}

export class Language implements ILanguage {
    readonly isInvariant?: boolean | undefined;
    readonly cultureName?: string | undefined;
    readonly nativeName?: string | undefined;
    readonly threeLeterLanguageName?: string | undefined;
    readonly twoLetterLanguageName?: string | undefined;
    readonly twoLetterRegionName?: string | undefined;
    readonly threeLetterRegionName?: string | undefined;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isInvariant = _data["isInvariant"];
            (<any>this).cultureName = _data["cultureName"];
            (<any>this).nativeName = _data["nativeName"];
            (<any>this).threeLeterLanguageName = _data["threeLeterLanguageName"];
            (<any>this).twoLetterLanguageName = _data["twoLetterLanguageName"];
            (<any>this).twoLetterRegionName = _data["twoLetterRegionName"];
            (<any>this).threeLetterRegionName = _data["threeLetterRegionName"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isInvariant"] = this.isInvariant;
        data["cultureName"] = this.cultureName;
        data["nativeName"] = this.nativeName;
        data["threeLeterLanguageName"] = this.threeLeterLanguageName;
        data["twoLetterLanguageName"] = this.twoLetterLanguageName;
        data["twoLetterRegionName"] = this.twoLetterRegionName;
        data["threeLetterRegionName"] = this.threeLetterRegionName;
        return data; 
    }
}

export interface ILanguage {
    isInvariant?: boolean | undefined;
    cultureName?: string | undefined;
    nativeName?: string | undefined;
    threeLeterLanguageName?: string | undefined;
    twoLetterLanguageName?: string | undefined;
    twoLetterRegionName?: string | undefined;
    threeLetterRegionName?: string | undefined;
}

export class UserUpdateInfo implements IUserUpdateInfo {
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    email?: string | undefined;
    roles?: string[] | undefined;
    id?: string | undefined;

    constructor(data?: IUserUpdateInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserUpdateInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserUpdateInfo {
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    email?: string | undefined;
    roles?: string[] | undefined;
    id?: string | undefined;
}

export class IdentityResult implements IIdentityResult {
    readonly succeeded?: boolean | undefined;
    readonly errors?: IdentityError[] | undefined;

    constructor(data?: IIdentityResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                (<any>this).errors = [] as any;
                for (let item of _data["errors"])
                    (<any>this).errors!.push(IdentityError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IdentityResult {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIdentityResult {
    succeeded?: boolean | undefined;
    errors?: IdentityError[] | undefined;
}

export class IdentityError implements IIdentityError {
    code?: string | undefined;
    description?: string | undefined;

    constructor(data?: IIdentityError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): IdentityError {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        return data; 
    }
}

export interface IIdentityError {
    code?: string | undefined;
    description?: string | undefined;
}

export class OrganizationRegistration implements IOrganizationRegistration {
    organizationName?: string | undefined;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    userName!: string;
    password!: string;
    storeId?: string | undefined;
    name?: string | undefined;
    address?: Address | undefined;
    salutation?: string | undefined;
    middleName?: string | undefined;
    birthDate?: Date | undefined;
    timeZone?: string | undefined;

    constructor(data?: IOrganizationRegistration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationName = _data["organizationName"];
            this.photoUrl = _data["photoUrl"];
            this.firstName = _data["firstName"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.storeId = _data["storeId"];
            this.name = _data["name"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.salutation = _data["salutation"];
            this.middleName = _data["middleName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.timeZone = _data["timeZone"];
        }
    }

    static fromJS(data: any): OrganizationRegistration {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationRegistration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationName"] = this.organizationName;
        data["photoUrl"] = this.photoUrl;
        data["firstName"] = this.firstName;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["storeId"] = this.storeId;
        data["name"] = this.name;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["salutation"] = this.salutation;
        data["middleName"] = this.middleName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["timeZone"] = this.timeZone;
        return data; 
    }
}

export interface IOrganizationRegistration {
    organizationName?: string | undefined;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    userName: string;
    password: string;
    storeId?: string | undefined;
    name?: string | undefined;
    address?: Address | undefined;
    salutation?: string | undefined;
    middleName?: string | undefined;
    birthDate?: Date | undefined;
    timeZone?: string | undefined;
}

export class OrganizationUserRegistration implements IOrganizationUserRegistration {
    role!: string;
    organizationId!: string;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    userName!: string;
    password!: string;
    storeId?: string | undefined;
    name?: string | undefined;
    address?: Address | undefined;
    salutation?: string | undefined;
    middleName?: string | undefined;
    birthDate?: Date | undefined;
    timeZone?: string | undefined;

    constructor(data?: IOrganizationUserRegistration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
            this.organizationId = _data["organizationId"];
            this.photoUrl = _data["photoUrl"];
            this.firstName = _data["firstName"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.storeId = _data["storeId"];
            this.name = _data["name"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.salutation = _data["salutation"];
            this.middleName = _data["middleName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.timeZone = _data["timeZone"];
        }
    }

    static fromJS(data: any): OrganizationUserRegistration {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUserRegistration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["organizationId"] = this.organizationId;
        data["photoUrl"] = this.photoUrl;
        data["firstName"] = this.firstName;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["storeId"] = this.storeId;
        data["name"] = this.name;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["salutation"] = this.salutation;
        data["middleName"] = this.middleName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["timeZone"] = this.timeZone;
        return data; 
    }
}

export interface IOrganizationUserRegistration {
    role: string;
    organizationId: string;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    userName: string;
    password: string;
    storeId?: string | undefined;
    name?: string | undefined;
    address?: Address | undefined;
    salutation?: string | undefined;
    middleName?: string | undefined;
    birthDate?: Date | undefined;
    timeZone?: string | undefined;
}

export class UsersInvitation implements IUsersInvitation {
    message?: string | undefined;
    roles?: string[] | undefined;
    emails!: string[];

    constructor(data?: IUsersInvitation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.emails = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(item);
            }
        }
    }

    static fromJS(data: any): UsersInvitation {
        data = typeof data === 'object' ? data : {};
        let result = new UsersInvitation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item);
        }
        return data; 
    }
}

export interface IUsersInvitation {
    message?: string | undefined;
    roles?: string[] | undefined;
    emails: string[];
}

export class OrganizationContactsSearchCriteria implements IOrganizationContactsSearchCriteria {
    organizationId?: string | undefined;
    sort?: string | undefined;
    searchPhrase?: string | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IOrganizationContactsSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationId = _data["organizationId"];
            this.sort = _data["sort"];
            this.searchPhrase = _data["searchPhrase"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): OrganizationContactsSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationContactsSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationId"] = this.organizationId;
        data["sort"] = this.sort;
        data["searchPhrase"] = this.searchPhrase;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IOrganizationContactsSearchCriteria {
    organizationId?: string | undefined;
    sort?: string | undefined;
    searchPhrase?: string | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class UserSearchResult implements IUserSearchResult {
    totalCount?: number | undefined;
    results?: User[] | undefined;

    constructor(data?: IUserSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserSearchResult {
    totalCount?: number | undefined;
    results?: User[] | undefined;
}

export class ChangePassword implements IChangePassword {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordConfirm?: string | undefined;

    constructor(data?: IChangePassword) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
            this.newPasswordConfirm = _data["newPasswordConfirm"];
        }
    }

    static fromJS(data: any): ChangePassword {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePassword();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        data["newPasswordConfirm"] = this.newPasswordConfirm;
        return data; 
    }
}

export interface IChangePassword {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordConfirm?: string | undefined;
}

export class PasswordChangeResult implements IPasswordChangeResult {
    succeeded?: boolean | undefined;
    errors?: FormError[] | undefined;

    constructor(data?: IPasswordChangeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(FormError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PasswordChangeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordChangeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPasswordChangeResult {
    succeeded?: boolean | undefined;
    errors?: FormError[] | undefined;
}

export class FormError implements IFormError {
    code?: string | undefined;
    readonly message?: string | undefined;
    description?: string | undefined;
    readonly indexKey?: string | undefined;

    constructor(data?: IFormError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            (<any>this).message = _data["message"];
            this.description = _data["description"];
            (<any>this).indexKey = _data["indexKey"];
        }
    }

    static fromJS(data: any): FormError {
        data = typeof data === 'object' ? data : {};
        let result = new FormError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["description"] = this.description;
        data["indexKey"] = this.indexKey;
        return data; 
    }
}

export interface IFormError {
    code?: string | undefined;
    message?: string | undefined;
    description?: string | undefined;
    indexKey?: string | undefined;
}

export class RemovePhoneNumberResult implements IRemovePhoneNumberResult {
    succeeded?: boolean | undefined;
    errors?: string[] | undefined;

    constructor(data?: IRemovePhoneNumberResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): RemovePhoneNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new RemovePhoneNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data; 
    }
}

export interface IRemovePhoneNumberResult {
    succeeded?: boolean | undefined;
    errors?: string[] | undefined;
}

export class UpdatePhoneNumberModel implements IUpdatePhoneNumberModel {
    phoneNumber!: string;

    constructor(data?: IUpdatePhoneNumberModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): UpdatePhoneNumberModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePhoneNumberModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

export interface IUpdatePhoneNumberModel {
    phoneNumber: string;
}

export class UpdatePhoneNumberResult implements IUpdatePhoneNumberResult {
    succeeded?: boolean | undefined;
    error?: string | undefined;

    constructor(data?: IUpdatePhoneNumberResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): UpdatePhoneNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePhoneNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["error"] = this.error;
        return data; 
    }
}

export interface IUpdatePhoneNumberResult {
    succeeded?: boolean | undefined;
    error?: string | undefined;
}

export class ChangeTwoFactorAuthenticationModel implements IChangeTwoFactorAuthenticationModel {
    enabled?: boolean | undefined;

    constructor(data?: IChangeTwoFactorAuthenticationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): ChangeTwoFactorAuthenticationModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeTwoFactorAuthenticationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface IChangeTwoFactorAuthenticationModel {
    enabled?: boolean | undefined;
}

export class ChangeTwoFactorAuthenticationResult implements IChangeTwoFactorAuthenticationResult {
    succeeded?: boolean | undefined;
    errors?: string[] | undefined;
    verificationUrl?: string | undefined;

    constructor(data?: IChangeTwoFactorAuthenticationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.verificationUrl = _data["verificationUrl"];
        }
    }

    static fromJS(data: any): ChangeTwoFactorAuthenticationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeTwoFactorAuthenticationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["verificationUrl"] = this.verificationUrl;
        return data; 
    }
}

export interface IChangeTwoFactorAuthenticationResult {
    succeeded?: boolean | undefined;
    errors?: string[] | undefined;
    verificationUrl?: string | undefined;
}

export class BlogSearchCriteria implements IBlogSearchCriteria {
    category?: string | undefined;
    tag?: string | undefined;
    author?: string | undefined;
    excludedArticleHandles?: string[] | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IBlogSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            this.tag = _data["tag"];
            this.author = _data["author"];
            if (Array.isArray(_data["excludedArticleHandles"])) {
                this.excludedArticleHandles = [] as any;
                for (let item of _data["excludedArticleHandles"])
                    this.excludedArticleHandles!.push(item);
            }
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): BlogSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new BlogSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["tag"] = this.tag;
        data["author"] = this.author;
        if (Array.isArray(this.excludedArticleHandles)) {
            data["excludedArticleHandles"] = [];
            for (let item of this.excludedArticleHandles)
                data["excludedArticleHandles"].push(item);
        }
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IBlogSearchCriteria {
    category?: string | undefined;
    tag?: string | undefined;
    author?: string | undefined;
    excludedArticleHandles?: string[] | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class BlogArticle implements IBlogArticle {
    readonly type?: string | undefined;
    excerpt?: string | undefined;
    blogName?: string | undefined;
    imageUrl?: string | undefined;
    isSticked?: boolean | undefined;
    isTrending?: boolean | undefined;
    author?: string | undefined;
    createdDate?: Date | undefined;
    publishedDate?: Date | undefined;
    title?: string | undefined;
    url?: string | undefined;
    permalink?: string | undefined;
    aliases?: string[] | undefined;
    aliasesUrls?: string[] | undefined;
    tags?: string[] | undefined;
    categories?: string[] | undefined;
    category?: string | undefined;
    isPublished?: boolean | undefined;
    readonly publishedAt?: Date | undefined;
    name?: string | undefined;
    storagePath?: string | undefined;
    content?: string | undefined;
    layout?: string | undefined;
    fileName?: string | undefined;
    language?: Language | undefined;
    priority?: number | undefined;
    description?: string | undefined;
    authorize?: boolean | undefined;
    readonly handle?: string | undefined;
    metaInfo?: { [key: string]: string[]; } | undefined;
    readonly metaFields?: { [key: string]: string[]; } | undefined;
    readonly indexKey?: string | undefined;

    constructor(data?: IBlogArticle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).type = _data["type"];
            this.excerpt = _data["excerpt"];
            this.blogName = _data["blogName"];
            this.imageUrl = _data["imageUrl"];
            this.isSticked = _data["isSticked"];
            this.isTrending = _data["isTrending"];
            this.author = _data["author"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.publishedDate = _data["publishedDate"] ? new Date(_data["publishedDate"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.url = _data["url"];
            this.permalink = _data["permalink"];
            if (Array.isArray(_data["aliases"])) {
                this.aliases = [] as any;
                for (let item of _data["aliases"])
                    this.aliases!.push(item);
            }
            if (Array.isArray(_data["aliasesUrls"])) {
                this.aliasesUrls = [] as any;
                for (let item of _data["aliasesUrls"])
                    this.aliasesUrls!.push(item);
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            this.category = _data["category"];
            this.isPublished = _data["isPublished"];
            (<any>this).publishedAt = _data["publishedAt"] ? new Date(_data["publishedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.storagePath = _data["storagePath"];
            this.content = _data["content"];
            this.layout = _data["layout"];
            this.fileName = _data["fileName"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
            this.priority = _data["priority"];
            this.description = _data["description"];
            this.authorize = _data["authorize"];
            (<any>this).handle = _data["handle"];
            if (_data["metaInfo"]) {
                this.metaInfo = {} as any;
                for (let key in _data["metaInfo"]) {
                    if (_data["metaInfo"].hasOwnProperty(key))
                        this.metaInfo![key] = _data["metaInfo"][key] !== undefined ? _data["metaInfo"][key] : [];
                }
            }
            if (_data["metaFields"]) {
                (<any>this).metaFields = {} as any;
                for (let key in _data["metaFields"]) {
                    if (_data["metaFields"].hasOwnProperty(key))
                        (<any>this).metaFields![key] = _data["metaFields"][key] !== undefined ? _data["metaFields"][key] : [];
                }
            }
            (<any>this).indexKey = _data["indexKey"];
        }
    }

    static fromJS(data: any): BlogArticle {
        data = typeof data === 'object' ? data : {};
        let result = new BlogArticle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["excerpt"] = this.excerpt;
        data["blogName"] = this.blogName;
        data["imageUrl"] = this.imageUrl;
        data["isSticked"] = this.isSticked;
        data["isTrending"] = this.isTrending;
        data["author"] = this.author;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["publishedDate"] = this.publishedDate ? this.publishedDate.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["url"] = this.url;
        data["permalink"] = this.permalink;
        if (Array.isArray(this.aliases)) {
            data["aliases"] = [];
            for (let item of this.aliases)
                data["aliases"].push(item);
        }
        if (Array.isArray(this.aliasesUrls)) {
            data["aliasesUrls"] = [];
            for (let item of this.aliasesUrls)
                data["aliasesUrls"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["category"] = this.category;
        data["isPublished"] = this.isPublished;
        data["publishedAt"] = this.publishedAt ? this.publishedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["storagePath"] = this.storagePath;
        data["content"] = this.content;
        data["layout"] = this.layout;
        data["fileName"] = this.fileName;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["priority"] = this.priority;
        data["description"] = this.description;
        data["authorize"] = this.authorize;
        data["handle"] = this.handle;
        if (this.metaInfo) {
            data["metaInfo"] = {};
            for (let key in this.metaInfo) {
                if (this.metaInfo.hasOwnProperty(key))
                    data["metaInfo"][key] = this.metaInfo[key];
            }
        }
        if (this.metaFields) {
            data["metaFields"] = {};
            for (let key in this.metaFields) {
                if (this.metaFields.hasOwnProperty(key))
                    data["metaFields"][key] = this.metaFields[key];
            }
        }
        data["indexKey"] = this.indexKey;
        return data; 
    }
}

export interface IBlogArticle {
    type?: string | undefined;
    excerpt?: string | undefined;
    blogName?: string | undefined;
    imageUrl?: string | undefined;
    isSticked?: boolean | undefined;
    isTrending?: boolean | undefined;
    author?: string | undefined;
    createdDate?: Date | undefined;
    publishedDate?: Date | undefined;
    title?: string | undefined;
    url?: string | undefined;
    permalink?: string | undefined;
    aliases?: string[] | undefined;
    aliasesUrls?: string[] | undefined;
    tags?: string[] | undefined;
    categories?: string[] | undefined;
    category?: string | undefined;
    isPublished?: boolean | undefined;
    publishedAt?: Date | undefined;
    name?: string | undefined;
    storagePath?: string | undefined;
    content?: string | undefined;
    layout?: string | undefined;
    fileName?: string | undefined;
    language?: Language | undefined;
    priority?: number | undefined;
    description?: string | undefined;
    authorize?: boolean | undefined;
    handle?: string | undefined;
    metaInfo?: { [key: string]: string[]; } | undefined;
    metaFields?: { [key: string]: string[]; } | undefined;
    indexKey?: string | undefined;
}

export class ShoppingCart implements IShoppingCart {
    name?: string | undefined;
    status?: string | undefined;
    storeId?: string | undefined;
    channelId?: string | undefined;
    hasPhysicalProducts?: boolean | undefined;
    isAnonymous?: boolean | undefined;
    customer?: User | undefined;
    customerId?: string | undefined;
    customerName?: string | undefined;
    organizationId?: string | undefined;
    isRecuring?: boolean | undefined;
    comment?: string | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    total?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    readonly extendedPriceTotal?: Money | undefined;
    readonly extendedPriceTotalWithTax?: Money | undefined;
    handlingTotal?: Money | undefined;
    handlingTotalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    addresses?: Address[] | undefined;
    items?: CartLineItem[] | undefined;
    readonly itemsCount?: number | undefined;
    readonly itemsQuantity?: number | undefined;
    readonly coupon?: Coupon | undefined;
    coupons?: Coupon[] | undefined;
    payments?: Payment[] | undefined;
    shipments?: CartShipment[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    availablePaymentMethods?: PaymentMethod[] | undefined;
    readonly recentlyAddedItem?: CartLineItem | undefined;
    paymentPlan?: PaymentPlan | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    readonly discounts?: Discount[] | undefined;
    readonly currency?: Currency | undefined;
    taxTotal?: Money | undefined;
    readonly taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    type?: string | undefined;
    language?: Language | undefined;
    id?: string | undefined;

    constructor(data?: IShoppingCart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.storeId = _data["storeId"];
            this.channelId = _data["channelId"];
            this.hasPhysicalProducts = _data["hasPhysicalProducts"];
            this.isAnonymous = _data["isAnonymous"];
            this.customer = _data["customer"] ? User.fromJS(_data["customer"]) : <any>undefined;
            this.customerId = _data["customerId"];
            this.customerName = _data["customerName"];
            this.organizationId = _data["organizationId"];
            this.isRecuring = _data["isRecuring"];
            this.comment = _data["comment"];
            this.volumetricWeight = _data["volumetricWeight"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.subTotal = _data["subTotal"] ? Money.fromJS(_data["subTotal"]) : <any>undefined;
            this.subTotalWithTax = _data["subTotalWithTax"] ? Money.fromJS(_data["subTotalWithTax"]) : <any>undefined;
            this.shippingPrice = _data["shippingPrice"] ? Money.fromJS(_data["shippingPrice"]) : <any>undefined;
            this.shippingPriceWithTax = _data["shippingPriceWithTax"] ? Money.fromJS(_data["shippingPriceWithTax"]) : <any>undefined;
            this.shippingTotal = _data["shippingTotal"] ? Money.fromJS(_data["shippingTotal"]) : <any>undefined;
            this.shippingTotalWithTax = _data["shippingTotalWithTax"] ? Money.fromJS(_data["shippingTotalWithTax"]) : <any>undefined;
            this.paymentPrice = _data["paymentPrice"] ? Money.fromJS(_data["paymentPrice"]) : <any>undefined;
            this.paymentPriceWithTax = _data["paymentPriceWithTax"] ? Money.fromJS(_data["paymentPriceWithTax"]) : <any>undefined;
            this.paymentTotal = _data["paymentTotal"] ? Money.fromJS(_data["paymentTotal"]) : <any>undefined;
            this.paymentTotalWithTax = _data["paymentTotalWithTax"] ? Money.fromJS(_data["paymentTotalWithTax"]) : <any>undefined;
            (<any>this).extendedPriceTotal = _data["extendedPriceTotal"] ? Money.fromJS(_data["extendedPriceTotal"]) : <any>undefined;
            (<any>this).extendedPriceTotalWithTax = _data["extendedPriceTotalWithTax"] ? Money.fromJS(_data["extendedPriceTotalWithTax"]) : <any>undefined;
            this.handlingTotal = _data["handlingTotal"] ? Money.fromJS(_data["handlingTotal"]) : <any>undefined;
            this.handlingTotalWithTax = _data["handlingTotalWithTax"] ? Money.fromJS(_data["handlingTotalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.discountTotalWithTax = _data["discountTotalWithTax"] ? Money.fromJS(_data["discountTotalWithTax"]) : <any>undefined;
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CartLineItem.fromJS(item));
            }
            (<any>this).itemsCount = _data["itemsCount"];
            (<any>this).itemsQuantity = _data["itemsQuantity"];
            (<any>this).coupon = _data["coupon"] ? Coupon.fromJS(_data["coupon"]) : <any>undefined;
            if (Array.isArray(_data["coupons"])) {
                this.coupons = [] as any;
                for (let item of _data["coupons"])
                    this.coupons!.push(Coupon.fromJS(item));
            }
            if (Array.isArray(_data["payments"])) {
                this.payments = [] as any;
                for (let item of _data["payments"])
                    this.payments!.push(Payment.fromJS(item));
            }
            if (Array.isArray(_data["shipments"])) {
                this.shipments = [] as any;
                for (let item of _data["shipments"])
                    this.shipments!.push(CartShipment.fromJS(item));
            }
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            if (Array.isArray(_data["availablePaymentMethods"])) {
                this.availablePaymentMethods = [] as any;
                for (let item of _data["availablePaymentMethods"])
                    this.availablePaymentMethods!.push(PaymentMethod.fromJS(item));
            }
            (<any>this).recentlyAddedItem = _data["recentlyAddedItem"] ? CartLineItem.fromJS(_data["recentlyAddedItem"]) : <any>undefined;
            this.paymentPlan = _data["paymentPlan"] ? PaymentPlan.fromJS(_data["paymentPlan"]) : <any>undefined;
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationError.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            (<any>this).currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            (<any>this).taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.type = _data["type"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShoppingCart {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingCart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["storeId"] = this.storeId;
        data["channelId"] = this.channelId;
        data["hasPhysicalProducts"] = this.hasPhysicalProducts;
        data["isAnonymous"] = this.isAnonymous;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["organizationId"] = this.organizationId;
        data["isRecuring"] = this.isRecuring;
        data["comment"] = this.comment;
        data["volumetricWeight"] = this.volumetricWeight;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["subTotal"] = this.subTotal ? this.subTotal.toJSON() : <any>undefined;
        data["subTotalWithTax"] = this.subTotalWithTax ? this.subTotalWithTax.toJSON() : <any>undefined;
        data["shippingPrice"] = this.shippingPrice ? this.shippingPrice.toJSON() : <any>undefined;
        data["shippingPriceWithTax"] = this.shippingPriceWithTax ? this.shippingPriceWithTax.toJSON() : <any>undefined;
        data["shippingTotal"] = this.shippingTotal ? this.shippingTotal.toJSON() : <any>undefined;
        data["shippingTotalWithTax"] = this.shippingTotalWithTax ? this.shippingTotalWithTax.toJSON() : <any>undefined;
        data["paymentPrice"] = this.paymentPrice ? this.paymentPrice.toJSON() : <any>undefined;
        data["paymentPriceWithTax"] = this.paymentPriceWithTax ? this.paymentPriceWithTax.toJSON() : <any>undefined;
        data["paymentTotal"] = this.paymentTotal ? this.paymentTotal.toJSON() : <any>undefined;
        data["paymentTotalWithTax"] = this.paymentTotalWithTax ? this.paymentTotalWithTax.toJSON() : <any>undefined;
        data["extendedPriceTotal"] = this.extendedPriceTotal ? this.extendedPriceTotal.toJSON() : <any>undefined;
        data["extendedPriceTotalWithTax"] = this.extendedPriceTotalWithTax ? this.extendedPriceTotalWithTax.toJSON() : <any>undefined;
        data["handlingTotal"] = this.handlingTotal ? this.handlingTotal.toJSON() : <any>undefined;
        data["handlingTotalWithTax"] = this.handlingTotalWithTax ? this.handlingTotalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["discountTotalWithTax"] = this.discountTotalWithTax ? this.discountTotalWithTax.toJSON() : <any>undefined;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["itemsCount"] = this.itemsCount;
        data["itemsQuantity"] = this.itemsQuantity;
        data["coupon"] = this.coupon ? this.coupon.toJSON() : <any>undefined;
        if (Array.isArray(this.coupons)) {
            data["coupons"] = [];
            for (let item of this.coupons)
                data["coupons"].push(item.toJSON());
        }
        if (Array.isArray(this.payments)) {
            data["payments"] = [];
            for (let item of this.payments)
                data["payments"].push(item.toJSON());
        }
        if (Array.isArray(this.shipments)) {
            data["shipments"] = [];
            for (let item of this.shipments)
                data["shipments"].push(item.toJSON());
        }
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.availablePaymentMethods)) {
            data["availablePaymentMethods"] = [];
            for (let item of this.availablePaymentMethods)
                data["availablePaymentMethods"].push(item.toJSON());
        }
        data["recentlyAddedItem"] = this.recentlyAddedItem ? this.recentlyAddedItem.toJSON() : <any>undefined;
        data["paymentPlan"] = this.paymentPlan ? this.paymentPlan.toJSON() : <any>undefined;
        data["isValid"] = this.isValid;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["type"] = this.type;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IShoppingCart {
    name?: string | undefined;
    status?: string | undefined;
    storeId?: string | undefined;
    channelId?: string | undefined;
    hasPhysicalProducts?: boolean | undefined;
    isAnonymous?: boolean | undefined;
    customer?: User | undefined;
    customerId?: string | undefined;
    customerName?: string | undefined;
    organizationId?: string | undefined;
    isRecuring?: boolean | undefined;
    comment?: string | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    total?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    extendedPriceTotal?: Money | undefined;
    extendedPriceTotalWithTax?: Money | undefined;
    handlingTotal?: Money | undefined;
    handlingTotalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    addresses?: Address[] | undefined;
    items?: CartLineItem[] | undefined;
    itemsCount?: number | undefined;
    itemsQuantity?: number | undefined;
    coupon?: Coupon | undefined;
    coupons?: Coupon[] | undefined;
    payments?: Payment[] | undefined;
    shipments?: CartShipment[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    availablePaymentMethods?: PaymentMethod[] | undefined;
    recentlyAddedItem?: CartLineItem | undefined;
    paymentPlan?: PaymentPlan | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    type?: string | undefined;
    language?: Language | undefined;
    id?: string | undefined;
}

export class Money implements IMoney {
    readonly internalAmount?: number | undefined;
    readonly amount?: number | undefined;
    readonly truncatedAmount?: number | undefined;
    readonly formattedAmount?: string | undefined;
    readonly formattedAmountWithoutPoint?: string | undefined;
    readonly formattedAmountWithoutCurrency?: string | undefined;
    readonly formattedAmountWithoutPointAndCurrency?: string | undefined;
    readonly currency?: Currency | undefined;
    readonly decimalDigits?: number | undefined;

    constructor(data?: IMoney) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).internalAmount = _data["internalAmount"];
            (<any>this).amount = _data["amount"];
            (<any>this).truncatedAmount = _data["truncatedAmount"];
            (<any>this).formattedAmount = _data["formattedAmount"];
            (<any>this).formattedAmountWithoutPoint = _data["formattedAmountWithoutPoint"];
            (<any>this).formattedAmountWithoutCurrency = _data["formattedAmountWithoutCurrency"];
            (<any>this).formattedAmountWithoutPointAndCurrency = _data["formattedAmountWithoutPointAndCurrency"];
            (<any>this).currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            (<any>this).decimalDigits = _data["decimalDigits"];
        }
    }

    static fromJS(data: any): Money {
        data = typeof data === 'object' ? data : {};
        let result = new Money();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["internalAmount"] = this.internalAmount;
        data["amount"] = this.amount;
        data["truncatedAmount"] = this.truncatedAmount;
        data["formattedAmount"] = this.formattedAmount;
        data["formattedAmountWithoutPoint"] = this.formattedAmountWithoutPoint;
        data["formattedAmountWithoutCurrency"] = this.formattedAmountWithoutCurrency;
        data["formattedAmountWithoutPointAndCurrency"] = this.formattedAmountWithoutPointAndCurrency;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["decimalDigits"] = this.decimalDigits;
        return data; 
    }
}

export interface IMoney {
    internalAmount?: number | undefined;
    amount?: number | undefined;
    truncatedAmount?: number | undefined;
    formattedAmount?: string | undefined;
    formattedAmountWithoutPoint?: string | undefined;
    formattedAmountWithoutCurrency?: string | undefined;
    formattedAmountWithoutPointAndCurrency?: string | undefined;
    currency?: Currency | undefined;
    decimalDigits?: number | undefined;
}

export class CartLineItem implements ICartLineItem {
    createdDate?: Date | undefined;
    product?: Product | undefined;
    productId?: string | undefined;
    productType?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    sku?: string | undefined;
    name?: string | undefined;
    quantity?: number | undefined;
    inStockQuantity?: number | undefined;
    warehouseLocation?: string | undefined;
    shipmentMethodCode?: string | undefined;
    requiredShipping?: boolean | undefined;
    thumbnailImageUrl?: string | undefined;
    imageUrl?: string | undefined;
    isGift?: boolean | undefined;
    readonly languageCode?: string | undefined;
    comment?: string | undefined;
    isReccuring?: boolean | undefined;
    taxIncluded?: boolean | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    isReadOnly?: boolean | undefined;
    listPrice?: Money | undefined;
    paymentPlan?: PaymentPlan | undefined;
    listPriceWithTax?: Money | undefined;
    salePrice?: Money | undefined;
    salePriceWithTax?: Money | undefined;
    placedPrice?: Money | undefined;
    placedPriceWithTax?: Money | undefined;
    extendedPrice?: Money | undefined;
    extendedPriceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    readonly currency?: Currency | undefined;
    readonly discounts?: Discount[] | undefined;
    id?: string | undefined;

    constructor(data?: ICartLineItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.productId = _data["productId"];
            this.productType = _data["productType"];
            this.catalogId = _data["catalogId"];
            this.categoryId = _data["categoryId"];
            this.sku = _data["sku"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.inStockQuantity = _data["inStockQuantity"];
            this.warehouseLocation = _data["warehouseLocation"];
            this.shipmentMethodCode = _data["shipmentMethodCode"];
            this.requiredShipping = _data["requiredShipping"];
            this.thumbnailImageUrl = _data["thumbnailImageUrl"];
            this.imageUrl = _data["imageUrl"];
            this.isGift = _data["isGift"];
            (<any>this).languageCode = _data["languageCode"];
            this.comment = _data["comment"];
            this.isReccuring = _data["isReccuring"];
            this.taxIncluded = _data["taxIncluded"];
            this.volumetricWeight = _data["volumetricWeight"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.isReadOnly = _data["isReadOnly"];
            this.listPrice = _data["listPrice"] ? Money.fromJS(_data["listPrice"]) : <any>undefined;
            this.paymentPlan = _data["paymentPlan"] ? PaymentPlan.fromJS(_data["paymentPlan"]) : <any>undefined;
            this.listPriceWithTax = _data["listPriceWithTax"] ? Money.fromJS(_data["listPriceWithTax"]) : <any>undefined;
            this.salePrice = _data["salePrice"] ? Money.fromJS(_data["salePrice"]) : <any>undefined;
            this.salePriceWithTax = _data["salePriceWithTax"] ? Money.fromJS(_data["salePriceWithTax"]) : <any>undefined;
            this.placedPrice = _data["placedPrice"] ? Money.fromJS(_data["placedPrice"]) : <any>undefined;
            this.placedPriceWithTax = _data["placedPriceWithTax"] ? Money.fromJS(_data["placedPriceWithTax"]) : <any>undefined;
            this.extendedPrice = _data["extendedPrice"] ? Money.fromJS(_data["extendedPrice"]) : <any>undefined;
            this.extendedPriceWithTax = _data["extendedPriceWithTax"] ? Money.fromJS(_data["extendedPriceWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.discountTotalWithTax = _data["discountTotalWithTax"] ? Money.fromJS(_data["discountTotalWithTax"]) : <any>undefined;
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationError.fromJS(item));
            }
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            (<any>this).currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CartLineItem {
        data = typeof data === 'object' ? data : {};
        let result = new CartLineItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["productType"] = this.productType;
        data["catalogId"] = this.catalogId;
        data["categoryId"] = this.categoryId;
        data["sku"] = this.sku;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["inStockQuantity"] = this.inStockQuantity;
        data["warehouseLocation"] = this.warehouseLocation;
        data["shipmentMethodCode"] = this.shipmentMethodCode;
        data["requiredShipping"] = this.requiredShipping;
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        data["imageUrl"] = this.imageUrl;
        data["isGift"] = this.isGift;
        data["languageCode"] = this.languageCode;
        data["comment"] = this.comment;
        data["isReccuring"] = this.isReccuring;
        data["taxIncluded"] = this.taxIncluded;
        data["volumetricWeight"] = this.volumetricWeight;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["isReadOnly"] = this.isReadOnly;
        data["listPrice"] = this.listPrice ? this.listPrice.toJSON() : <any>undefined;
        data["paymentPlan"] = this.paymentPlan ? this.paymentPlan.toJSON() : <any>undefined;
        data["listPriceWithTax"] = this.listPriceWithTax ? this.listPriceWithTax.toJSON() : <any>undefined;
        data["salePrice"] = this.salePrice ? this.salePrice.toJSON() : <any>undefined;
        data["salePriceWithTax"] = this.salePriceWithTax ? this.salePriceWithTax.toJSON() : <any>undefined;
        data["placedPrice"] = this.placedPrice ? this.placedPrice.toJSON() : <any>undefined;
        data["placedPriceWithTax"] = this.placedPriceWithTax ? this.placedPriceWithTax.toJSON() : <any>undefined;
        data["extendedPrice"] = this.extendedPrice ? this.extendedPrice.toJSON() : <any>undefined;
        data["extendedPriceWithTax"] = this.extendedPriceWithTax ? this.extendedPriceWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["discountTotalWithTax"] = this.discountTotalWithTax ? this.discountTotalWithTax.toJSON() : <any>undefined;
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["isValid"] = this.isValid;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ICartLineItem {
    createdDate?: Date | undefined;
    product?: Product | undefined;
    productId?: string | undefined;
    productType?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    sku?: string | undefined;
    name?: string | undefined;
    quantity?: number | undefined;
    inStockQuantity?: number | undefined;
    warehouseLocation?: string | undefined;
    shipmentMethodCode?: string | undefined;
    requiredShipping?: boolean | undefined;
    thumbnailImageUrl?: string | undefined;
    imageUrl?: string | undefined;
    isGift?: boolean | undefined;
    languageCode?: string | undefined;
    comment?: string | undefined;
    isReccuring?: boolean | undefined;
    taxIncluded?: boolean | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    isReadOnly?: boolean | undefined;
    listPrice?: Money | undefined;
    paymentPlan?: PaymentPlan | undefined;
    listPriceWithTax?: Money | undefined;
    salePrice?: Money | undefined;
    salePriceWithTax?: Money | undefined;
    placedPrice?: Money | undefined;
    placedPriceWithTax?: Money | undefined;
    extendedPrice?: Money | undefined;
    extendedPriceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    currency?: Currency | undefined;
    discounts?: Discount[] | undefined;
    id?: string | undefined;
}

export class Coupon implements ICoupon {
    code?: string | undefined;
    description?: string | undefined;
    appliedSuccessfully?: boolean | undefined;
    errorCode?: string | undefined;

    constructor(data?: ICoupon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.appliedSuccessfully = _data["appliedSuccessfully"];
            this.errorCode = _data["errorCode"];
        }
    }

    static fromJS(data: any): Coupon {
        data = typeof data === 'object' ? data : {};
        let result = new Coupon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["appliedSuccessfully"] = this.appliedSuccessfully;
        data["errorCode"] = this.errorCode;
        return data; 
    }
}

export interface ICoupon {
    code?: string | undefined;
    description?: string | undefined;
    appliedSuccessfully?: boolean | undefined;
    errorCode?: string | undefined;
}

export class Payment implements IPayment {
    outerId?: string | undefined;
    paymentGatewayCode?: string | undefined;
    currency?: Currency | undefined;
    amount?: Money | undefined;
    billingAddress?: Address | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    readonly discounts?: Discount[] | undefined;
    id?: string | undefined;

    constructor(data?: IPayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.outerId = _data["outerId"];
            this.paymentGatewayCode = _data["paymentGatewayCode"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.amount = _data["amount"] ? Money.fromJS(_data["amount"]) : <any>undefined;
            this.billingAddress = _data["billingAddress"] ? Address.fromJS(_data["billingAddress"]) : <any>undefined;
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.totalWithTax = _data["totalWithTax"] ? Money.fromJS(_data["totalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Payment {
        data = typeof data === 'object' ? data : {};
        let result = new Payment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outerId"] = this.outerId;
        data["paymentGatewayCode"] = this.paymentGatewayCode;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["amount"] = this.amount ? this.amount.toJSON() : <any>undefined;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["totalWithTax"] = this.totalWithTax ? this.totalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IPayment {
    outerId?: string | undefined;
    paymentGatewayCode?: string | undefined;
    currency?: Currency | undefined;
    amount?: Money | undefined;
    billingAddress?: Address | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    discounts?: Discount[] | undefined;
    id?: string | undefined;
}

export class CartShipment implements ICartShipment {
    shipmentMethodCode?: string | undefined;
    shipmentMethodOption?: string | undefined;
    fulfillmentCenterId?: string | undefined;
    deliveryAddress?: Address | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    items?: CartShipmentItem[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    readonly discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
    id?: string | undefined;

    constructor(data?: ICartShipment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipmentMethodCode = _data["shipmentMethodCode"];
            this.shipmentMethodOption = _data["shipmentMethodOption"];
            this.fulfillmentCenterId = _data["fulfillmentCenterId"];
            this.deliveryAddress = _data["deliveryAddress"] ? Address.fromJS(_data["deliveryAddress"]) : <any>undefined;
            this.volumetricWeight = _data["volumetricWeight"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.totalWithTax = _data["totalWithTax"] ? Money.fromJS(_data["totalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CartShipmentItem.fromJS(item));
            }
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.isValid = _data["isValid"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationError.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CartShipment {
        data = typeof data === 'object' ? data : {};
        let result = new CartShipment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipmentMethodCode"] = this.shipmentMethodCode;
        data["shipmentMethodOption"] = this.shipmentMethodOption;
        data["fulfillmentCenterId"] = this.fulfillmentCenterId;
        data["deliveryAddress"] = this.deliveryAddress ? this.deliveryAddress.toJSON() : <any>undefined;
        data["volumetricWeight"] = this.volumetricWeight;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["totalWithTax"] = this.totalWithTax ? this.totalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["isValid"] = this.isValid;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICartShipment {
    shipmentMethodCode?: string | undefined;
    shipmentMethodOption?: string | undefined;
    fulfillmentCenterId?: string | undefined;
    deliveryAddress?: Address | undefined;
    volumetricWeight?: number | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    items?: CartShipmentItem[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    isValid?: boolean | undefined;
    validationErrors?: ValidationError[] | undefined;
    discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
    id?: string | undefined;
}

export class PaymentMethod implements IPaymentMethod {
    code?: string | undefined;
    name?: string | undefined;
    logoUrl?: string | undefined;
    description?: string | undefined;
    paymentMethodType?: string | undefined;
    paymentMethodGroupType?: string | undefined;
    priority?: number | undefined;
    isAvailableForPartial?: boolean | undefined;
    settings?: SettingEntry[] | undefined;
    currency?: Currency | undefined;
    price?: Money | undefined;
    readonly priceWithTax?: Money | undefined;
    readonly total?: Money | undefined;
    readonly totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    readonly discountAmountWithTax?: Money | undefined;
    readonly taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    readonly discounts?: Discount[] | undefined;

    constructor(data?: IPaymentMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.logoUrl = _data["logoUrl"];
            this.description = _data["description"];
            this.paymentMethodType = _data["paymentMethodType"];
            this.paymentMethodGroupType = _data["paymentMethodGroupType"];
            this.priority = _data["priority"];
            this.isAvailableForPartial = _data["isAvailableForPartial"];
            if (Array.isArray(_data["settings"])) {
                this.settings = [] as any;
                for (let item of _data["settings"])
                    this.settings!.push(SettingEntry.fromJS(item));
            }
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            (<any>this).priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            (<any>this).total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            (<any>this).totalWithTax = _data["totalWithTax"] ? Money.fromJS(_data["totalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            (<any>this).discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            (<any>this).taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentMethod {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["logoUrl"] = this.logoUrl;
        data["description"] = this.description;
        data["paymentMethodType"] = this.paymentMethodType;
        data["paymentMethodGroupType"] = this.paymentMethodGroupType;
        data["priority"] = this.priority;
        data["isAvailableForPartial"] = this.isAvailableForPartial;
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["totalWithTax"] = this.totalWithTax ? this.totalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaymentMethod {
    code?: string | undefined;
    name?: string | undefined;
    logoUrl?: string | undefined;
    description?: string | undefined;
    paymentMethodType?: string | undefined;
    paymentMethodGroupType?: string | undefined;
    priority?: number | undefined;
    isAvailableForPartial?: boolean | undefined;
    settings?: SettingEntry[] | undefined;
    currency?: Currency | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    discounts?: Discount[] | undefined;
}

export class PaymentPlan implements IPaymentPlan {
    interval?: PaymentPlanInterval | undefined;
    intervalCount?: number | undefined;
    trialPeriodDays?: number | undefined;
    id?: string | undefined;

    constructor(data?: IPaymentPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.interval = _data["interval"];
            this.intervalCount = _data["intervalCount"];
            this.trialPeriodDays = _data["trialPeriodDays"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PaymentPlan {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["interval"] = this.interval;
        data["intervalCount"] = this.intervalCount;
        data["trialPeriodDays"] = this.trialPeriodDays;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPaymentPlan {
    interval?: PaymentPlanInterval | undefined;
    intervalCount?: number | undefined;
    trialPeriodDays?: number | undefined;
    id?: string | undefined;
}

export class ValidationError implements IValidationError {
    readonly errorCode?: string | undefined;

    constructor(data?: IValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).errorCode = _data["errorCode"];
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        return data; 
    }
}

export interface IValidationError {
    errorCode?: string | undefined;
}

export class Discount implements IDiscount {
    readonly code?: string | undefined;
    promotionId?: string | undefined;
    amount?: Money | undefined;
    readonly savings?: number | undefined;
    coupon?: string | undefined;
    description?: string | undefined;

    constructor(data?: IDiscount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).code = _data["code"];
            this.promotionId = _data["promotionId"];
            this.amount = _data["amount"] ? Money.fromJS(_data["amount"]) : <any>undefined;
            (<any>this).savings = _data["savings"];
            this.coupon = _data["coupon"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): Discount {
        data = typeof data === 'object' ? data : {};
        let result = new Discount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["promotionId"] = this.promotionId;
        data["amount"] = this.amount ? this.amount.toJSON() : <any>undefined;
        data["savings"] = this.savings;
        data["coupon"] = this.coupon;
        data["description"] = this.description;
        return data; 
    }
}

export interface IDiscount {
    code?: string | undefined;
    promotionId?: string | undefined;
    amount?: Money | undefined;
    savings?: number | undefined;
    coupon?: string | undefined;
    description?: string | undefined;
}

export class Currency implements ICurrency {
    code?: string | undefined;
    cultureName?: string | undefined;
    symbol?: string | undefined;
    englishName?: string | undefined;
    exchangeRate?: number | undefined;
    customFormatting?: string | undefined;

    constructor(data?: ICurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.cultureName = _data["cultureName"];
            this.symbol = _data["symbol"];
            this.englishName = _data["englishName"];
            this.exchangeRate = _data["exchangeRate"];
            this.customFormatting = _data["customFormatting"];
        }
    }

    static fromJS(data: any): Currency {
        data = typeof data === 'object' ? data : {};
        let result = new Currency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["cultureName"] = this.cultureName;
        data["symbol"] = this.symbol;
        data["englishName"] = this.englishName;
        data["exchangeRate"] = this.exchangeRate;
        data["customFormatting"] = this.customFormatting;
        return data; 
    }
}

export interface ICurrency {
    code?: string | undefined;
    cultureName?: string | undefined;
    symbol?: string | undefined;
    englishName?: string | undefined;
    exchangeRate?: number | undefined;
    customFormatting?: string | undefined;
}

export class TaxDetail implements ITaxDetail {
    rate?: Money | undefined;
    amount?: Money | undefined;
    readonly title?: string | undefined;
    readonly price?: number | undefined;
    name?: string | undefined;

    constructor(data?: ITaxDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rate = _data["rate"] ? Money.fromJS(_data["rate"]) : <any>undefined;
            this.amount = _data["amount"] ? Money.fromJS(_data["amount"]) : <any>undefined;
            (<any>this).title = _data["title"];
            (<any>this).price = _data["price"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TaxDetail {
        data = typeof data === 'object' ? data : {};
        let result = new TaxDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rate"] = this.rate ? this.rate.toJSON() : <any>undefined;
        data["amount"] = this.amount ? this.amount.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["price"] = this.price;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITaxDetail {
    rate?: Money | undefined;
    amount?: Money | undefined;
    title?: string | undefined;
    price?: number | undefined;
    name?: string | undefined;
}

export class Product implements IProduct {
    readonly handle?: string | undefined;
    readonly indexKey?: string | undefined;
    manufacturerPartNumber?: string | undefined;
    gtin?: string | undefined;
    sku?: string | undefined;
    name?: string | undefined;
    readonly title?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    outline?: string | undefined;
    seoPath?: string | undefined;
    url?: string | undefined;
    indexingDate?: Date | undefined;
    titularItemId?: string | undefined;
    isBuyable?: boolean | undefined;
    readonly buyable?: boolean | undefined;
    isInStock?: boolean | undefined;
    readonly inStock?: boolean | undefined;
    isActive?: boolean | undefined;
    trackInventory?: boolean | undefined;
    maxQuantity?: number | undefined;
    minQuantity?: number | undefined;
    productType?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    packageType?: string | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    enableReview?: boolean | undefined;
    maxNumberOfDownload?: number | undefined;
    downloadExpiration?: Date | undefined;
    downloadType?: string | undefined;
    hasUserAgreement?: boolean | undefined;
    shippingType?: string | undefined;
    vendorId?: string | undefined;
    vendor?: Vendor | undefined;
    variationProperties?: CatalogProperty[] | undefined;
    assets?: Asset[] | undefined;
    variations?: Product[] | undefined;
    description?: string | undefined;
    descriptions?: EditorialReview[] | undefined;
    price?: ProductPrice | undefined;
    readonly priceWithTax?: Money | undefined;
    prices?: ProductPrice[] | undefined;
    inventory?: Inventory | undefined;
    inventoryAll?: Inventory[] | undefined;
    readonly availableQuantity?: number | undefined;
    seoInfo?: SeoInfo | undefined;
    primaryImage?: Image | undefined;
    images?: Image[] | undefined;
    readonly isQuotable?: boolean | undefined;
    isAvailable?: boolean | undefined;
    readonly available?: boolean | undefined;
    paymentPlan?: PaymentPlan | undefined;
    properties?: CatalogProperty[] | undefined;
    readonly taxTotal?: Money | undefined;
    readonly taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    readonly discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
    id?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).handle = _data["handle"];
            (<any>this).indexKey = _data["indexKey"];
            this.manufacturerPartNumber = _data["manufacturerPartNumber"];
            this.gtin = _data["gtin"];
            this.sku = _data["sku"];
            this.name = _data["name"];
            (<any>this).title = _data["title"];
            this.catalogId = _data["catalogId"];
            this.categoryId = _data["categoryId"];
            this.outline = _data["outline"];
            this.seoPath = _data["seoPath"];
            this.url = _data["url"];
            this.indexingDate = _data["indexingDate"] ? new Date(_data["indexingDate"].toString()) : <any>undefined;
            this.titularItemId = _data["titularItemId"];
            this.isBuyable = _data["isBuyable"];
            (<any>this).buyable = _data["buyable"];
            this.isInStock = _data["isInStock"];
            (<any>this).inStock = _data["inStock"];
            this.isActive = _data["isActive"];
            this.trackInventory = _data["trackInventory"];
            this.maxQuantity = _data["maxQuantity"];
            this.minQuantity = _data["minQuantity"];
            this.productType = _data["productType"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.packageType = _data["packageType"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.enableReview = _data["enableReview"];
            this.maxNumberOfDownload = _data["maxNumberOfDownload"];
            this.downloadExpiration = _data["downloadExpiration"] ? new Date(_data["downloadExpiration"].toString()) : <any>undefined;
            this.downloadType = _data["downloadType"];
            this.hasUserAgreement = _data["hasUserAgreement"];
            this.shippingType = _data["shippingType"];
            this.vendorId = _data["vendorId"];
            this.vendor = _data["vendor"] ? Vendor.fromJS(_data["vendor"]) : <any>undefined;
            if (Array.isArray(_data["variationProperties"])) {
                this.variationProperties = [] as any;
                for (let item of _data["variationProperties"])
                    this.variationProperties!.push(CatalogProperty.fromJS(item));
            }
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(Asset.fromJS(item));
            }
            if (Array.isArray(_data["variations"])) {
                this.variations = [] as any;
                for (let item of _data["variations"])
                    this.variations!.push(Product.fromJS(item));
            }
            this.description = _data["description"];
            if (Array.isArray(_data["descriptions"])) {
                this.descriptions = [] as any;
                for (let item of _data["descriptions"])
                    this.descriptions!.push(EditorialReview.fromJS(item));
            }
            this.price = _data["price"] ? ProductPrice.fromJS(_data["price"]) : <any>undefined;
            (<any>this).priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            if (Array.isArray(_data["prices"])) {
                this.prices = [] as any;
                for (let item of _data["prices"])
                    this.prices!.push(ProductPrice.fromJS(item));
            }
            this.inventory = _data["inventory"] ? Inventory.fromJS(_data["inventory"]) : <any>undefined;
            if (Array.isArray(_data["inventoryAll"])) {
                this.inventoryAll = [] as any;
                for (let item of _data["inventoryAll"])
                    this.inventoryAll!.push(Inventory.fromJS(item));
            }
            (<any>this).availableQuantity = _data["availableQuantity"];
            this.seoInfo = _data["seoInfo"] ? SeoInfo.fromJS(_data["seoInfo"]) : <any>undefined;
            this.primaryImage = _data["primaryImage"] ? Image.fromJS(_data["primaryImage"]) : <any>undefined;
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Image.fromJS(item));
            }
            (<any>this).isQuotable = _data["isQuotable"];
            this.isAvailable = _data["isAvailable"];
            (<any>this).available = _data["available"];
            this.paymentPlan = _data["paymentPlan"] ? PaymentPlan.fromJS(_data["paymentPlan"]) : <any>undefined;
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(CatalogProperty.fromJS(item));
            }
            (<any>this).taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            (<any>this).taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle;
        data["indexKey"] = this.indexKey;
        data["manufacturerPartNumber"] = this.manufacturerPartNumber;
        data["gtin"] = this.gtin;
        data["sku"] = this.sku;
        data["name"] = this.name;
        data["title"] = this.title;
        data["catalogId"] = this.catalogId;
        data["categoryId"] = this.categoryId;
        data["outline"] = this.outline;
        data["seoPath"] = this.seoPath;
        data["url"] = this.url;
        data["indexingDate"] = this.indexingDate ? this.indexingDate.toISOString() : <any>undefined;
        data["titularItemId"] = this.titularItemId;
        data["isBuyable"] = this.isBuyable;
        data["buyable"] = this.buyable;
        data["isInStock"] = this.isInStock;
        data["inStock"] = this.inStock;
        data["isActive"] = this.isActive;
        data["trackInventory"] = this.trackInventory;
        data["maxQuantity"] = this.maxQuantity;
        data["minQuantity"] = this.minQuantity;
        data["productType"] = this.productType;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["packageType"] = this.packageType;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["enableReview"] = this.enableReview;
        data["maxNumberOfDownload"] = this.maxNumberOfDownload;
        data["downloadExpiration"] = this.downloadExpiration ? this.downloadExpiration.toISOString() : <any>undefined;
        data["downloadType"] = this.downloadType;
        data["hasUserAgreement"] = this.hasUserAgreement;
        data["shippingType"] = this.shippingType;
        data["vendorId"] = this.vendorId;
        data["vendor"] = this.vendor ? this.vendor.toJSON() : <any>undefined;
        if (Array.isArray(this.variationProperties)) {
            data["variationProperties"] = [];
            for (let item of this.variationProperties)
                data["variationProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        if (Array.isArray(this.variations)) {
            data["variations"] = [];
            for (let item of this.variations)
                data["variations"].push(item.toJSON());
        }
        data["description"] = this.description;
        if (Array.isArray(this.descriptions)) {
            data["descriptions"] = [];
            for (let item of this.descriptions)
                data["descriptions"].push(item.toJSON());
        }
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        if (Array.isArray(this.prices)) {
            data["prices"] = [];
            for (let item of this.prices)
                data["prices"].push(item.toJSON());
        }
        data["inventory"] = this.inventory ? this.inventory.toJSON() : <any>undefined;
        if (Array.isArray(this.inventoryAll)) {
            data["inventoryAll"] = [];
            for (let item of this.inventoryAll)
                data["inventoryAll"].push(item.toJSON());
        }
        data["availableQuantity"] = this.availableQuantity;
        data["seoInfo"] = this.seoInfo ? this.seoInfo.toJSON() : <any>undefined;
        data["primaryImage"] = this.primaryImage ? this.primaryImage.toJSON() : <any>undefined;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["isQuotable"] = this.isQuotable;
        data["isAvailable"] = this.isAvailable;
        data["available"] = this.available;
        data["paymentPlan"] = this.paymentPlan ? this.paymentPlan.toJSON() : <any>undefined;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProduct {
    handle?: string | undefined;
    indexKey?: string | undefined;
    manufacturerPartNumber?: string | undefined;
    gtin?: string | undefined;
    sku?: string | undefined;
    name?: string | undefined;
    title?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    outline?: string | undefined;
    seoPath?: string | undefined;
    url?: string | undefined;
    indexingDate?: Date | undefined;
    titularItemId?: string | undefined;
    isBuyable?: boolean | undefined;
    buyable?: boolean | undefined;
    isInStock?: boolean | undefined;
    inStock?: boolean | undefined;
    isActive?: boolean | undefined;
    trackInventory?: boolean | undefined;
    maxQuantity?: number | undefined;
    minQuantity?: number | undefined;
    productType?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    packageType?: string | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    enableReview?: boolean | undefined;
    maxNumberOfDownload?: number | undefined;
    downloadExpiration?: Date | undefined;
    downloadType?: string | undefined;
    hasUserAgreement?: boolean | undefined;
    shippingType?: string | undefined;
    vendorId?: string | undefined;
    vendor?: Vendor | undefined;
    variationProperties?: CatalogProperty[] | undefined;
    assets?: Asset[] | undefined;
    variations?: Product[] | undefined;
    description?: string | undefined;
    descriptions?: EditorialReview[] | undefined;
    price?: ProductPrice | undefined;
    priceWithTax?: Money | undefined;
    prices?: ProductPrice[] | undefined;
    inventory?: Inventory | undefined;
    inventoryAll?: Inventory[] | undefined;
    availableQuantity?: number | undefined;
    seoInfo?: SeoInfo | undefined;
    primaryImage?: Image | undefined;
    images?: Image[] | undefined;
    isQuotable?: boolean | undefined;
    isAvailable?: boolean | undefined;
    available?: boolean | undefined;
    paymentPlan?: PaymentPlan | undefined;
    properties?: CatalogProperty[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
    id?: string | undefined;
}

export class CartShipmentItem implements ICartShipmentItem {
    lineItem?: CartLineItem | undefined;
    quantity?: number | undefined;
    id?: string | undefined;

    constructor(data?: ICartShipmentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineItem = _data["lineItem"] ? CartLineItem.fromJS(_data["lineItem"]) : <any>undefined;
            this.quantity = _data["quantity"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CartShipmentItem {
        data = typeof data === 'object' ? data : {};
        let result = new CartShipmentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineItem"] = this.lineItem ? this.lineItem.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICartShipmentItem {
    lineItem?: CartLineItem | undefined;
    quantity?: number | undefined;
    id?: string | undefined;
}

export class SettingEntry implements ISettingEntry {
    name?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
    allowedValues?: string[] | undefined;
    defaultValue?: string | undefined;
    isArray?: boolean | undefined;
    arrayValues?: string[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    readonly indexKey?: string | undefined;

    constructor(data?: ISettingEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.valueType = _data["valueType"];
            if (Array.isArray(_data["allowedValues"])) {
                this.allowedValues = [] as any;
                for (let item of _data["allowedValues"])
                    this.allowedValues!.push(item);
            }
            this.defaultValue = _data["defaultValue"];
            this.isArray = _data["isArray"];
            if (Array.isArray(_data["arrayValues"])) {
                this.arrayValues = [] as any;
                for (let item of _data["arrayValues"])
                    this.arrayValues!.push(item);
            }
            this.title = _data["title"];
            this.description = _data["description"];
            (<any>this).indexKey = _data["indexKey"];
        }
    }

    static fromJS(data: any): SettingEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SettingEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        if (Array.isArray(this.allowedValues)) {
            data["allowedValues"] = [];
            for (let item of this.allowedValues)
                data["allowedValues"].push(item);
        }
        data["defaultValue"] = this.defaultValue;
        data["isArray"] = this.isArray;
        if (Array.isArray(this.arrayValues)) {
            data["arrayValues"] = [];
            for (let item of this.arrayValues)
                data["arrayValues"].push(item);
        }
        data["title"] = this.title;
        data["description"] = this.description;
        data["indexKey"] = this.indexKey;
        return data; 
    }
}

export interface ISettingEntry {
    name?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
    allowedValues?: string[] | undefined;
    defaultValue?: string | undefined;
    isArray?: boolean | undefined;
    arrayValues?: string[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    indexKey?: string | undefined;
}

export class Vendor implements IVendor {
    description?: string | undefined;
    siteUrl?: string | undefined;
    logoUrl?: string | undefined;
    groupName?: string | undefined;
    seoInfo?: SeoInfo | undefined;
    products?: Product[] | undefined;
    readonly handle?: string | undefined;
    phoneNumbers?: string[] | undefined;
    readonly email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;

    constructor(data?: IVendor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.siteUrl = _data["siteUrl"];
            this.logoUrl = _data["logoUrl"];
            this.groupName = _data["groupName"];
            this.seoInfo = _data["seoInfo"] ? SeoInfo.fromJS(_data["seoInfo"]) : <any>undefined;
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            (<any>this).handle = _data["handle"];
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(item);
            }
            (<any>this).email = _data["email"];
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(item);
            }
            this.name = _data["name"];
            this.memberType = _data["memberType"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phones"])) {
                this.phones = [] as any;
                for (let item of _data["phones"])
                    this.phones!.push(item);
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(item);
            }
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Vendor {
        data = typeof data === 'object' ? data : {};
        let result = new Vendor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["siteUrl"] = this.siteUrl;
        data["logoUrl"] = this.logoUrl;
        data["groupName"] = this.groupName;
        data["seoInfo"] = this.seoInfo ? this.seoInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["handle"] = this.handle;
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item);
        }
        data["email"] = this.email;
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item);
        }
        data["name"] = this.name;
        data["memberType"] = this.memberType;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phones)) {
            data["phones"] = [];
            for (let item of this.phones)
                data["phones"].push(item);
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item);
        }
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IVendor {
    description?: string | undefined;
    siteUrl?: string | undefined;
    logoUrl?: string | undefined;
    groupName?: string | undefined;
    seoInfo?: SeoInfo | undefined;
    products?: Product[] | undefined;
    handle?: string | undefined;
    phoneNumbers?: string[] | undefined;
    email?: string | undefined;
    emails?: string[] | undefined;
    name?: string | undefined;
    memberType?: string | undefined;
    addresses?: Address[] | undefined;
    phones?: string[] | undefined;
    groups?: string[] | undefined;
    userGroups?: string[] | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    id?: string | undefined;
}

export class CatalogProperty implements ICatalogProperty {
    name?: string | undefined;
    type?: string | undefined;
    valueType?: string | undefined;
    valueId?: string | undefined;
    localizedValues?: LocalizedString[] | undefined;
    value?: string | undefined;
    displayName?: string | undefined;
    displayNames?: LocalizedString[] | undefined;
    isMultivalue?: boolean | undefined;
    values?: string[] | undefined;
    readonly indexKey?: string | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;

    constructor(data?: ICatalogProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.valueType = _data["valueType"];
            this.valueId = _data["valueId"];
            if (Array.isArray(_data["localizedValues"])) {
                this.localizedValues = [] as any;
                for (let item of _data["localizedValues"])
                    this.localizedValues!.push(LocalizedString.fromJS(item));
            }
            this.value = _data["value"];
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["displayNames"])) {
                this.displayNames = [] as any;
                for (let item of _data["displayNames"])
                    this.displayNames!.push(LocalizedString.fromJS(item));
            }
            this.isMultivalue = _data["isMultivalue"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
            (<any>this).indexKey = _data["indexKey"];
            this.hidden = _data["hidden"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CatalogProperty {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["valueType"] = this.valueType;
        data["valueId"] = this.valueId;
        if (Array.isArray(this.localizedValues)) {
            data["localizedValues"] = [];
            for (let item of this.localizedValues)
                data["localizedValues"].push(item.toJSON());
        }
        data["value"] = this.value;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.displayNames)) {
            data["displayNames"] = [];
            for (let item of this.displayNames)
                data["displayNames"].push(item.toJSON());
        }
        data["isMultivalue"] = this.isMultivalue;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        data["indexKey"] = this.indexKey;
        data["hidden"] = this.hidden;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICatalogProperty {
    name?: string | undefined;
    type?: string | undefined;
    valueType?: string | undefined;
    valueId?: string | undefined;
    localizedValues?: LocalizedString[] | undefined;
    value?: string | undefined;
    displayName?: string | undefined;
    displayNames?: LocalizedString[] | undefined;
    isMultivalue?: boolean | undefined;
    values?: string[] | undefined;
    indexKey?: string | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
}

export class Asset implements IAsset {
    size?: number | undefined;
    mimeType?: string | undefined;
    url?: string | undefined;
    typeId?: string | undefined;
    group?: string | undefined;
    name?: string | undefined;

    constructor(data?: IAsset) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.size = _data["size"];
            this.mimeType = _data["mimeType"];
            this.url = _data["url"];
            this.typeId = _data["typeId"];
            this.group = _data["group"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Asset {
        data = typeof data === 'object' ? data : {};
        let result = new Asset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["mimeType"] = this.mimeType;
        data["url"] = this.url;
        data["typeId"] = this.typeId;
        data["group"] = this.group;
        data["name"] = this.name;
        return data; 
    }
}

export interface IAsset {
    size?: number | undefined;
    mimeType?: string | undefined;
    url?: string | undefined;
    typeId?: string | undefined;
    group?: string | undefined;
    name?: string | undefined;
}

export class EditorialReview implements IEditorialReview {
    reviewType?: string | undefined;
    readonly content?: string | undefined;
    readonly indexKey?: string | undefined;
    value?: string | undefined;
    language?: Language | undefined;

    constructor(data?: IEditorialReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reviewType = _data["reviewType"];
            (<any>this).content = _data["content"];
            (<any>this).indexKey = _data["indexKey"];
            this.value = _data["value"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditorialReview {
        data = typeof data === 'object' ? data : {};
        let result = new EditorialReview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reviewType"] = this.reviewType;
        data["content"] = this.content;
        data["indexKey"] = this.indexKey;
        data["value"] = this.value;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditorialReview {
    reviewType?: string | undefined;
    content?: string | undefined;
    indexKey?: string | undefined;
    value?: string | undefined;
    language?: Language | undefined;
}

export class ProductPrice implements IProductPrice {
    pricelistId?: string | undefined;
    currency?: Currency | undefined;
    productId?: string | undefined;
    discountAmount?: Money | undefined;
    readonly discountAmountWithTax?: Money | undefined;
    readonly discountPercent?: number | undefined;
    listPrice?: Money | undefined;
    readonly listPriceWithTax?: Money | undefined;
    salePrice?: Money | undefined;
    readonly salePriceWithTax?: Money | undefined;
    readonly actualPrice?: Money | undefined;
    readonly actualPriceWithTax?: Money | undefined;
    discounts?: Discount[] | undefined;
    minQuantity?: number | undefined;
    tierPrices?: TierPrice[] | undefined;
    readonly taxTotal?: Money | undefined;
    readonly taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;

    constructor(data?: IProductPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pricelistId = _data["pricelistId"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.productId = _data["productId"];
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            (<any>this).discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            (<any>this).discountPercent = _data["discountPercent"];
            this.listPrice = _data["listPrice"] ? Money.fromJS(_data["listPrice"]) : <any>undefined;
            (<any>this).listPriceWithTax = _data["listPriceWithTax"] ? Money.fromJS(_data["listPriceWithTax"]) : <any>undefined;
            this.salePrice = _data["salePrice"] ? Money.fromJS(_data["salePrice"]) : <any>undefined;
            (<any>this).salePriceWithTax = _data["salePriceWithTax"] ? Money.fromJS(_data["salePriceWithTax"]) : <any>undefined;
            (<any>this).actualPrice = _data["actualPrice"] ? Money.fromJS(_data["actualPrice"]) : <any>undefined;
            (<any>this).actualPriceWithTax = _data["actualPriceWithTax"] ? Money.fromJS(_data["actualPriceWithTax"]) : <any>undefined;
            if (Array.isArray(_data["discounts"])) {
                this.discounts = [] as any;
                for (let item of _data["discounts"])
                    this.discounts!.push(Discount.fromJS(item));
            }
            this.minQuantity = _data["minQuantity"];
            if (Array.isArray(_data["tierPrices"])) {
                this.tierPrices = [] as any;
                for (let item of _data["tierPrices"])
                    this.tierPrices!.push(TierPrice.fromJS(item));
            }
            (<any>this).taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            (<any>this).taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductPrice {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pricelistId"] = this.pricelistId;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["discountPercent"] = this.discountPercent;
        data["listPrice"] = this.listPrice ? this.listPrice.toJSON() : <any>undefined;
        data["listPriceWithTax"] = this.listPriceWithTax ? this.listPriceWithTax.toJSON() : <any>undefined;
        data["salePrice"] = this.salePrice ? this.salePrice.toJSON() : <any>undefined;
        data["salePriceWithTax"] = this.salePriceWithTax ? this.salePriceWithTax.toJSON() : <any>undefined;
        data["actualPrice"] = this.actualPrice ? this.actualPrice.toJSON() : <any>undefined;
        data["actualPriceWithTax"] = this.actualPriceWithTax ? this.actualPriceWithTax.toJSON() : <any>undefined;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["minQuantity"] = this.minQuantity;
        if (Array.isArray(this.tierPrices)) {
            data["tierPrices"] = [];
            for (let item of this.tierPrices)
                data["tierPrices"].push(item.toJSON());
        }
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductPrice {
    pricelistId?: string | undefined;
    currency?: Currency | undefined;
    productId?: string | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    discountPercent?: number | undefined;
    listPrice?: Money | undefined;
    listPriceWithTax?: Money | undefined;
    salePrice?: Money | undefined;
    salePriceWithTax?: Money | undefined;
    actualPrice?: Money | undefined;
    actualPriceWithTax?: Money | undefined;
    discounts?: Discount[] | undefined;
    minQuantity?: number | undefined;
    tierPrices?: TierPrice[] | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
}

export class Inventory implements IInventory {
    preorderAvailabilityDate?: Date | undefined;
    backorderAvailabilityDate?: Date | undefined;
    allowPreorder?: boolean | undefined;
    allowBackorder?: boolean | undefined;
    status?: InventoryStatus | undefined;
    fulfillmentCenterId?: string | undefined;
    inStockQuantity?: number | undefined;
    reservedQuantity?: number | undefined;
    productId?: string | undefined;

    constructor(data?: IInventory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preorderAvailabilityDate = _data["preorderAvailabilityDate"] ? new Date(_data["preorderAvailabilityDate"].toString()) : <any>undefined;
            this.backorderAvailabilityDate = _data["backorderAvailabilityDate"] ? new Date(_data["backorderAvailabilityDate"].toString()) : <any>undefined;
            this.allowPreorder = _data["allowPreorder"];
            this.allowBackorder = _data["allowBackorder"];
            this.status = _data["status"];
            this.fulfillmentCenterId = _data["fulfillmentCenterId"];
            this.inStockQuantity = _data["inStockQuantity"];
            this.reservedQuantity = _data["reservedQuantity"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): Inventory {
        data = typeof data === 'object' ? data : {};
        let result = new Inventory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preorderAvailabilityDate"] = this.preorderAvailabilityDate ? this.preorderAvailabilityDate.toISOString() : <any>undefined;
        data["backorderAvailabilityDate"] = this.backorderAvailabilityDate ? this.backorderAvailabilityDate.toISOString() : <any>undefined;
        data["allowPreorder"] = this.allowPreorder;
        data["allowBackorder"] = this.allowBackorder;
        data["status"] = this.status;
        data["fulfillmentCenterId"] = this.fulfillmentCenterId;
        data["inStockQuantity"] = this.inStockQuantity;
        data["reservedQuantity"] = this.reservedQuantity;
        data["productId"] = this.productId;
        return data; 
    }
}

export interface IInventory {
    preorderAvailabilityDate?: Date | undefined;
    backorderAvailabilityDate?: Date | undefined;
    allowPreorder?: boolean | undefined;
    allowBackorder?: boolean | undefined;
    status?: InventoryStatus | undefined;
    fulfillmentCenterId?: string | undefined;
    inStockQuantity?: number | undefined;
    reservedQuantity?: number | undefined;
    productId?: string | undefined;
}

export class SeoInfo implements ISeoInfo {
    metaDescription?: string | undefined;
    slug?: string | undefined;
    metaKeywords?: string | undefined;
    title?: string | undefined;
    imageUrl?: string | undefined;
    language?: Language | undefined;

    constructor(data?: ISeoInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metaDescription = _data["metaDescription"];
            this.slug = _data["slug"];
            this.metaKeywords = _data["metaKeywords"];
            this.title = _data["title"];
            this.imageUrl = _data["imageUrl"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SeoInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SeoInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metaDescription"] = this.metaDescription;
        data["slug"] = this.slug;
        data["metaKeywords"] = this.metaKeywords;
        data["title"] = this.title;
        data["imageUrl"] = this.imageUrl;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISeoInfo {
    metaDescription?: string | undefined;
    slug?: string | undefined;
    metaKeywords?: string | undefined;
    title?: string | undefined;
    imageUrl?: string | undefined;
    language?: Language | undefined;
}

export class Image implements IImage {
    url?: string | undefined;
    fullSizeImageUrl?: string | undefined;
    title?: string | undefined;
    readonly name?: string | undefined;
    alt?: string | undefined;
    sortOrder?: number | undefined;
    group?: string | undefined;
    languageCode?: string | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.fullSizeImageUrl = _data["fullSizeImageUrl"];
            this.title = _data["title"];
            (<any>this).name = _data["name"];
            this.alt = _data["alt"];
            this.sortOrder = _data["sortOrder"];
            this.group = _data["group"];
            this.languageCode = _data["languageCode"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["fullSizeImageUrl"] = this.fullSizeImageUrl;
        data["title"] = this.title;
        data["name"] = this.name;
        data["alt"] = this.alt;
        data["sortOrder"] = this.sortOrder;
        data["group"] = this.group;
        data["languageCode"] = this.languageCode;
        return data; 
    }
}

export interface IImage {
    url?: string | undefined;
    fullSizeImageUrl?: string | undefined;
    title?: string | undefined;
    name?: string | undefined;
    alt?: string | undefined;
    sortOrder?: number | undefined;
    group?: string | undefined;
    languageCode?: string | undefined;
}

export class TierPrice implements ITierPrice {
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    readonly discountAmountWithTax?: Money | undefined;
    readonly actualPrice?: Money | undefined;
    readonly actualPriceWithTax?: Money | undefined;
    quantity?: number | undefined;
    currency?: Currency | undefined;
    readonly taxTotal?: Money | undefined;
    readonly taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;

    constructor(data?: ITierPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            (<any>this).discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            (<any>this).actualPrice = _data["actualPrice"] ? Money.fromJS(_data["actualPrice"]) : <any>undefined;
            (<any>this).actualPriceWithTax = _data["actualPriceWithTax"] ? Money.fromJS(_data["actualPriceWithTax"]) : <any>undefined;
            this.quantity = _data["quantity"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            (<any>this).taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            (<any>this).taxPercentRate = _data["taxPercentRate"];
            this.taxType = _data["taxType"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TierPrice {
        data = typeof data === 'object' ? data : {};
        let result = new TierPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["actualPrice"] = this.actualPrice ? this.actualPrice.toJSON() : <any>undefined;
        data["actualPriceWithTax"] = this.actualPriceWithTax ? this.actualPriceWithTax.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        data["taxType"] = this.taxType;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITierPrice {
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    actualPrice?: Money | undefined;
    actualPriceWithTax?: Money | undefined;
    quantity?: number | undefined;
    currency?: Currency | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    taxType?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
}

export class UpdateCartCommentRequest implements IUpdateCartCommentRequest {
    comment?: string | undefined;

    constructor(data?: IUpdateCartCommentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): UpdateCartCommentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCartCommentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment;
        return data; 
    }
}

export interface IUpdateCartCommentRequest {
    comment?: string | undefined;
}

export class AddCartItem implements IAddCartItem {
    id?: string | undefined;
    productId?: string | undefined;
    quantity?: number | undefined;
    type?: string | undefined;
    listName?: string | undefined;

    constructor(data?: IAddCartItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.type = _data["type"];
            this.listName = _data["listName"];
        }
    }

    static fromJS(data: any): AddCartItem {
        data = typeof data === 'object' ? data : {};
        let result = new AddCartItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["type"] = this.type;
        data["listName"] = this.listName;
        return data; 
    }
}

export interface IAddCartItem {
    id?: string | undefined;
    productId?: string | undefined;
    quantity?: number | undefined;
    type?: string | undefined;
    listName?: string | undefined;
}

export class ShoppingCartItems implements IShoppingCartItems {
    itemsCount?: number | undefined;

    constructor(data?: IShoppingCartItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemsCount = _data["itemsCount"];
        }
    }

    static fromJS(data: any): ShoppingCartItems {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingCartItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemsCount"] = this.itemsCount;
        return data; 
    }
}

export interface IShoppingCartItems {
    itemsCount?: number | undefined;
}

export class ChangeCartItemQty implements IChangeCartItemQty {
    lineItemId?: string | undefined;
    quantity?: number | undefined;

    constructor(data?: IChangeCartItemQty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineItemId = _data["lineItemId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): ChangeCartItemQty {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeCartItemQty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineItemId"] = this.lineItemId;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IChangeCartItemQty {
    lineItemId?: string | undefined;
    quantity?: number | undefined;
}

export class ChangeCartItemPrice implements IChangeCartItemPrice {
    lineItemId?: string | undefined;
    newPrice?: number | undefined;

    constructor(data?: IChangeCartItemPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineItemId = _data["lineItemId"];
            this.newPrice = _data["newPrice"];
        }
    }

    static fromJS(data: any): ChangeCartItemPrice {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeCartItemPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineItemId"] = this.lineItemId;
        data["newPrice"] = this.newPrice;
        return data; 
    }
}

export interface IChangeCartItemPrice {
    lineItemId?: string | undefined;
    newPrice?: number | undefined;
}

export class ShippingMethod implements IShippingMethod {
    priority?: number | undefined;
    shipmentMethodCode?: string | undefined;
    name?: string | undefined;
    readonly title?: string | undefined;
    readonly handle?: string | undefined;
    optionName?: string | undefined;
    optionDescription?: string | undefined;
    logoUrl?: string | undefined;
    price?: Money | undefined;
    readonly priceWithTax?: Money | undefined;
    readonly total?: Money | undefined;
    readonly totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    readonly discountAmountWithTax?: Money | undefined;
    settings?: SettingEntry[] | undefined;
    readonly taxTotal?: Money | undefined;
    taxType?: string | undefined;
    readonly taxPercentRate?: number | undefined;
    taxDetails?: TaxDetail[] | undefined;
    readonly discounts?: Discount[] | undefined;
    currency?: Currency | undefined;

    constructor(data?: IShippingMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priority = _data["priority"];
            this.shipmentMethodCode = _data["shipmentMethodCode"];
            this.name = _data["name"];
            (<any>this).title = _data["title"];
            (<any>this).handle = _data["handle"];
            this.optionName = _data["optionName"];
            this.optionDescription = _data["optionDescription"];
            this.logoUrl = _data["logoUrl"];
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            (<any>this).priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            (<any>this).total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            (<any>this).totalWithTax = _data["totalWithTax"] ? Money.fromJS(_data["totalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            (<any>this).discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            if (Array.isArray(_data["settings"])) {
                this.settings = [] as any;
                for (let item of _data["settings"])
                    this.settings!.push(SettingEntry.fromJS(item));
            }
            (<any>this).taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxType = _data["taxType"];
            (<any>this).taxPercentRate = _data["taxPercentRate"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            if (Array.isArray(_data["discounts"])) {
                (<any>this).discounts = [] as any;
                for (let item of _data["discounts"])
                    (<any>this).discounts!.push(Discount.fromJS(item));
            }
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShippingMethod {
        data = typeof data === 'object' ? data : {};
        let result = new ShippingMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priority"] = this.priority;
        data["shipmentMethodCode"] = this.shipmentMethodCode;
        data["name"] = this.name;
        data["title"] = this.title;
        data["handle"] = this.handle;
        data["optionName"] = this.optionName;
        data["optionDescription"] = this.optionDescription;
        data["logoUrl"] = this.logoUrl;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["totalWithTax"] = this.totalWithTax ? this.totalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxType"] = this.taxType;
        data["taxPercentRate"] = this.taxPercentRate;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IShippingMethod {
    priority?: number | undefined;
    shipmentMethodCode?: string | undefined;
    name?: string | undefined;
    title?: string | undefined;
    handle?: string | undefined;
    optionName?: string | undefined;
    optionDescription?: string | undefined;
    logoUrl?: string | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    settings?: SettingEntry[] | undefined;
    taxTotal?: Money | undefined;
    taxType?: string | undefined;
    taxPercentRate?: number | undefined;
    taxDetails?: TaxDetail[] | undefined;
    discounts?: Discount[] | undefined;
    currency?: Currency | undefined;
}

export class BankCardInfo implements IBankCardInfo {
    bankCardNumber?: string | undefined;
    bankCardType?: string | undefined;
    bankCardMonth?: number | undefined;
    bankCardYear?: number | undefined;
    bankCardCVV2?: string | undefined;
    cardholderName?: string | undefined;

    constructor(data?: IBankCardInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bankCardNumber = _data["bankCardNumber"];
            this.bankCardType = _data["bankCardType"];
            this.bankCardMonth = _data["bankCardMonth"];
            this.bankCardYear = _data["bankCardYear"];
            this.bankCardCVV2 = _data["bankCardCVV2"];
            this.cardholderName = _data["cardholderName"];
        }
    }

    static fromJS(data: any): BankCardInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BankCardInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCardNumber"] = this.bankCardNumber;
        data["bankCardType"] = this.bankCardType;
        data["bankCardMonth"] = this.bankCardMonth;
        data["bankCardYear"] = this.bankCardYear;
        data["bankCardCVV2"] = this.bankCardCVV2;
        data["cardholderName"] = this.cardholderName;
        return data; 
    }
}

export interface IBankCardInfo {
    bankCardNumber?: string | undefined;
    bankCardType?: string | undefined;
    bankCardMonth?: number | undefined;
    bankCardYear?: number | undefined;
    bankCardCVV2?: string | undefined;
    cardholderName?: string | undefined;
}

export class OrderCreatedInfo implements IOrderCreatedInfo {
    order?: CustomerOrder | undefined;
    orderProcessingResult?: ProcessPaymentResult | undefined;
    paymentMethod?: PaymentMethod | undefined;

    constructor(data?: IOrderCreatedInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.order = _data["order"] ? CustomerOrder.fromJS(_data["order"]) : <any>undefined;
            this.orderProcessingResult = _data["orderProcessingResult"] ? ProcessPaymentResult.fromJS(_data["orderProcessingResult"]) : <any>undefined;
            this.paymentMethod = _data["paymentMethod"] ? PaymentMethod.fromJS(_data["paymentMethod"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderCreatedInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OrderCreatedInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        data["orderProcessingResult"] = this.orderProcessingResult ? this.orderProcessingResult.toJSON() : <any>undefined;
        data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderCreatedInfo {
    order?: CustomerOrder | undefined;
    orderProcessingResult?: ProcessPaymentResult | undefined;
    paymentMethod?: PaymentMethod | undefined;
}

export class CustomerOrder implements ICustomerOrder {
    paymentMethodType?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    channelId?: string | undefined;
    storeId?: string | undefined;
    storeName?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    addresses?: Address[] | undefined;
    readonly financialStatus?: string | undefined;
    inPayments?: PaymentIn[] | undefined;
    items?: OrderLineItem[] | undefined;
    shipments?: OrderShipment[] | undefined;
    discount?: Discount | undefined;
    taxDetails?: TaxDetail[] | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    readonly currencyCode?: string | undefined;
    isCancelled?: boolean | undefined;
    readonly cancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    discounts?: Discount[] | undefined;
    total?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    shippingTaxTotal?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentDiscountTotal?: Money | undefined;
    paymentDiscountTotalWithTax?: Money | undefined;
    paymentTaxTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    shippingDiscountTotalWithTax?: Money | undefined;
    shippingDiscountTotal?: Money | undefined;
    subTotalTaxTotal?: Money | undefined;
    subTotalDiscount?: Money | undefined;
    subTotalDiscountWithTax?: Money | undefined;
    subscriptionNumber?: string | undefined;
    id?: string | undefined;

    constructor(data?: ICustomerOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentMethodType = _data["paymentMethodType"];
            this.customerName = _data["customerName"];
            this.customerId = _data["customerId"];
            this.channelId = _data["channelId"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
            this.organizationName = _data["organizationName"];
            this.organizationId = _data["organizationId"];
            this.employeeName = _data["employeeName"];
            this.employeeId = _data["employeeId"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            (<any>this).financialStatus = _data["financialStatus"];
            if (Array.isArray(_data["inPayments"])) {
                this.inPayments = [] as any;
                for (let item of _data["inPayments"])
                    this.inPayments!.push(PaymentIn.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderLineItem.fromJS(item));
            }
            if (Array.isArray(_data["shipments"])) {
                this.shipments = [] as any;
                for (let item of _data["shipments"])
                    this.shipments!.push(OrderShipment.fromJS(item));
            }
            this.discount = _data["discount"] ? Discount.fromJS(_data["discount"]) : <any>undefined;
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.number = _data["number"];
            this.isApproved = _data["isApproved"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            (<any>this).currencyCode = _data["currencyCode"];
            this.isCancelled = _data["isCancelled"];
            (<any>this).cancelled = _data["cancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            if (Array.isArray(_data["discounts"])) {
                this.discounts = [] as any;
                for (let item of _data["discounts"])
                    this.discounts!.push(Discount.fromJS(item));
            }
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            this.subTotal = _data["subTotal"] ? Money.fromJS(_data["subTotal"]) : <any>undefined;
            this.subTotalWithTax = _data["subTotalWithTax"] ? Money.fromJS(_data["subTotalWithTax"]) : <any>undefined;
            this.shippingTotal = _data["shippingTotal"] ? Money.fromJS(_data["shippingTotal"]) : <any>undefined;
            this.shippingTotalWithTax = _data["shippingTotalWithTax"] ? Money.fromJS(_data["shippingTotalWithTax"]) : <any>undefined;
            this.shippingTaxTotal = _data["shippingTaxTotal"] ? Money.fromJS(_data["shippingTaxTotal"]) : <any>undefined;
            this.shippingPrice = _data["shippingPrice"] ? Money.fromJS(_data["shippingPrice"]) : <any>undefined;
            this.shippingPriceWithTax = _data["shippingPriceWithTax"] ? Money.fromJS(_data["shippingPriceWithTax"]) : <any>undefined;
            this.paymentTotal = _data["paymentTotal"] ? Money.fromJS(_data["paymentTotal"]) : <any>undefined;
            this.paymentTotalWithTax = _data["paymentTotalWithTax"] ? Money.fromJS(_data["paymentTotalWithTax"]) : <any>undefined;
            this.paymentPrice = _data["paymentPrice"] ? Money.fromJS(_data["paymentPrice"]) : <any>undefined;
            this.paymentPriceWithTax = _data["paymentPriceWithTax"] ? Money.fromJS(_data["paymentPriceWithTax"]) : <any>undefined;
            this.paymentDiscountTotal = _data["paymentDiscountTotal"] ? Money.fromJS(_data["paymentDiscountTotal"]) : <any>undefined;
            this.paymentDiscountTotalWithTax = _data["paymentDiscountTotalWithTax"] ? Money.fromJS(_data["paymentDiscountTotalWithTax"]) : <any>undefined;
            this.paymentTaxTotal = _data["paymentTaxTotal"] ? Money.fromJS(_data["paymentTaxTotal"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.discountTotalWithTax = _data["discountTotalWithTax"] ? Money.fromJS(_data["discountTotalWithTax"]) : <any>undefined;
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.shippingDiscountTotalWithTax = _data["shippingDiscountTotalWithTax"] ? Money.fromJS(_data["shippingDiscountTotalWithTax"]) : <any>undefined;
            this.shippingDiscountTotal = _data["shippingDiscountTotal"] ? Money.fromJS(_data["shippingDiscountTotal"]) : <any>undefined;
            this.subTotalTaxTotal = _data["subTotalTaxTotal"] ? Money.fromJS(_data["subTotalTaxTotal"]) : <any>undefined;
            this.subTotalDiscount = _data["subTotalDiscount"] ? Money.fromJS(_data["subTotalDiscount"]) : <any>undefined;
            this.subTotalDiscountWithTax = _data["subTotalDiscountWithTax"] ? Money.fromJS(_data["subTotalDiscountWithTax"]) : <any>undefined;
            this.subscriptionNumber = _data["subscriptionNumber"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CustomerOrder {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMethodType"] = this.paymentMethodType;
        data["customerName"] = this.customerName;
        data["customerId"] = this.customerId;
        data["channelId"] = this.channelId;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        data["organizationName"] = this.organizationName;
        data["organizationId"] = this.organizationId;
        data["employeeName"] = this.employeeName;
        data["employeeId"] = this.employeeId;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["financialStatus"] = this.financialStatus;
        if (Array.isArray(this.inPayments)) {
            data["inPayments"] = [];
            for (let item of this.inPayments)
                data["inPayments"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.shipments)) {
            data["shipments"] = [];
            for (let item of this.shipments)
                data["shipments"].push(item.toJSON());
        }
        data["discount"] = this.discount ? this.discount.toJSON() : <any>undefined;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["number"] = this.number;
        data["isApproved"] = this.isApproved;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["currencyCode"] = this.currencyCode;
        data["isCancelled"] = this.isCancelled;
        data["cancelled"] = this.cancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["subTotal"] = this.subTotal ? this.subTotal.toJSON() : <any>undefined;
        data["subTotalWithTax"] = this.subTotalWithTax ? this.subTotalWithTax.toJSON() : <any>undefined;
        data["shippingTotal"] = this.shippingTotal ? this.shippingTotal.toJSON() : <any>undefined;
        data["shippingTotalWithTax"] = this.shippingTotalWithTax ? this.shippingTotalWithTax.toJSON() : <any>undefined;
        data["shippingTaxTotal"] = this.shippingTaxTotal ? this.shippingTaxTotal.toJSON() : <any>undefined;
        data["shippingPrice"] = this.shippingPrice ? this.shippingPrice.toJSON() : <any>undefined;
        data["shippingPriceWithTax"] = this.shippingPriceWithTax ? this.shippingPriceWithTax.toJSON() : <any>undefined;
        data["paymentTotal"] = this.paymentTotal ? this.paymentTotal.toJSON() : <any>undefined;
        data["paymentTotalWithTax"] = this.paymentTotalWithTax ? this.paymentTotalWithTax.toJSON() : <any>undefined;
        data["paymentPrice"] = this.paymentPrice ? this.paymentPrice.toJSON() : <any>undefined;
        data["paymentPriceWithTax"] = this.paymentPriceWithTax ? this.paymentPriceWithTax.toJSON() : <any>undefined;
        data["paymentDiscountTotal"] = this.paymentDiscountTotal ? this.paymentDiscountTotal.toJSON() : <any>undefined;
        data["paymentDiscountTotalWithTax"] = this.paymentDiscountTotalWithTax ? this.paymentDiscountTotalWithTax.toJSON() : <any>undefined;
        data["paymentTaxTotal"] = this.paymentTaxTotal ? this.paymentTaxTotal.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["discountTotalWithTax"] = this.discountTotalWithTax ? this.discountTotalWithTax.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["shippingDiscountTotalWithTax"] = this.shippingDiscountTotalWithTax ? this.shippingDiscountTotalWithTax.toJSON() : <any>undefined;
        data["shippingDiscountTotal"] = this.shippingDiscountTotal ? this.shippingDiscountTotal.toJSON() : <any>undefined;
        data["subTotalTaxTotal"] = this.subTotalTaxTotal ? this.subTotalTaxTotal.toJSON() : <any>undefined;
        data["subTotalDiscount"] = this.subTotalDiscount ? this.subTotalDiscount.toJSON() : <any>undefined;
        data["subTotalDiscountWithTax"] = this.subTotalDiscountWithTax ? this.subTotalDiscountWithTax.toJSON() : <any>undefined;
        data["subscriptionNumber"] = this.subscriptionNumber;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICustomerOrder {
    paymentMethodType?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    channelId?: string | undefined;
    storeId?: string | undefined;
    storeName?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    addresses?: Address[] | undefined;
    financialStatus?: string | undefined;
    inPayments?: PaymentIn[] | undefined;
    items?: OrderLineItem[] | undefined;
    shipments?: OrderShipment[] | undefined;
    discount?: Discount | undefined;
    taxDetails?: TaxDetail[] | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    currencyCode?: string | undefined;
    isCancelled?: boolean | undefined;
    cancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    discounts?: Discount[] | undefined;
    total?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    shippingTaxTotal?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentDiscountTotal?: Money | undefined;
    paymentDiscountTotalWithTax?: Money | undefined;
    paymentTaxTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    shippingDiscountTotalWithTax?: Money | undefined;
    shippingDiscountTotal?: Money | undefined;
    subTotalTaxTotal?: Money | undefined;
    subTotalDiscount?: Money | undefined;
    subTotalDiscountWithTax?: Money | undefined;
    subscriptionNumber?: string | undefined;
    id?: string | undefined;
}

export class ProcessPaymentResult implements IProcessPaymentResult {
    paymentMethod?: PaymentMethod | undefined;
    newPaymentStatus?: string | undefined;
    redirectUrl?: string | undefined;
    htmlForm?: string | undefined;
    isSuccess?: boolean | undefined;
    error?: string | undefined;
    outerId?: string | undefined;

    constructor(data?: IProcessPaymentResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentMethod = _data["paymentMethod"] ? PaymentMethod.fromJS(_data["paymentMethod"]) : <any>undefined;
            this.newPaymentStatus = _data["newPaymentStatus"];
            this.redirectUrl = _data["redirectUrl"];
            this.htmlForm = _data["htmlForm"];
            this.isSuccess = _data["isSuccess"];
            this.error = _data["error"];
            this.outerId = _data["outerId"];
        }
    }

    static fromJS(data: any): ProcessPaymentResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessPaymentResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>undefined;
        data["newPaymentStatus"] = this.newPaymentStatus;
        data["redirectUrl"] = this.redirectUrl;
        data["htmlForm"] = this.htmlForm;
        data["isSuccess"] = this.isSuccess;
        data["error"] = this.error;
        data["outerId"] = this.outerId;
        return data; 
    }
}

export interface IProcessPaymentResult {
    paymentMethod?: PaymentMethod | undefined;
    newPaymentStatus?: string | undefined;
    redirectUrl?: string | undefined;
    htmlForm?: string | undefined;
    isSuccess?: boolean | undefined;
    error?: string | undefined;
    outerId?: string | undefined;
}

export class PaymentIn implements IPaymentIn {
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    purpose?: string | undefined;
    gatewayCode?: string | undefined;
    paymentMethodType?: string | undefined;
    incomingDate?: Date | undefined;
    outerId?: string | undefined;
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    sum?: Money | undefined;
    tax?: Money | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    authorizedDate?: Date | undefined;
    capturedDate?: Date | undefined;
    voidedDate?: Date | undefined;
    orderId?: string | undefined;
    id?: string | undefined;
    bankCardInfo?: BankCardInfo | undefined;
    billingAddress?: Address | undefined;

    constructor(data?: IPaymentIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationName = _data["organizationName"];
            this.organizationId = _data["organizationId"];
            this.customerName = _data["customerName"];
            this.customerId = _data["customerId"];
            this.purpose = _data["purpose"];
            this.gatewayCode = _data["gatewayCode"];
            this.paymentMethodType = _data["paymentMethodType"];
            this.incomingDate = _data["incomingDate"] ? new Date(_data["incomingDate"].toString()) : <any>undefined;
            this.outerId = _data["outerId"];
            this.operationType = _data["operationType"];
            this.number = _data["number"];
            this.isApproved = _data["isApproved"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.taxIncluded = _data["taxIncluded"];
            this.sum = _data["sum"] ? Money.fromJS(_data["sum"]) : <any>undefined;
            this.tax = _data["tax"] ? Money.fromJS(_data["tax"]) : <any>undefined;
            this.isCancelled = _data["isCancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            this.parentOperationId = _data["parentOperationId"];
            if (Array.isArray(_data["childrenOperations"])) {
                this.childrenOperations = [] as any;
                for (let item of _data["childrenOperations"])
                    this.childrenOperations!.push(Operation.fromJS(item));
            }
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.authorizedDate = _data["authorizedDate"] ? new Date(_data["authorizedDate"].toString()) : <any>undefined;
            this.capturedDate = _data["capturedDate"] ? new Date(_data["capturedDate"].toString()) : <any>undefined;
            this.voidedDate = _data["voidedDate"] ? new Date(_data["voidedDate"].toString()) : <any>undefined;
            this.orderId = _data["orderId"];
            this.id = _data["id"];
            this.bankCardInfo = _data["bankCardInfo"] ? BankCardInfo.fromJS(_data["bankCardInfo"]) : <any>undefined;
            this.billingAddress = _data["billingAddress"] ? Address.fromJS(_data["billingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentIn {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationName"] = this.organizationName;
        data["organizationId"] = this.organizationId;
        data["customerName"] = this.customerName;
        data["customerId"] = this.customerId;
        data["purpose"] = this.purpose;
        data["gatewayCode"] = this.gatewayCode;
        data["paymentMethodType"] = this.paymentMethodType;
        data["incomingDate"] = this.incomingDate ? this.incomingDate.toISOString() : <any>undefined;
        data["outerId"] = this.outerId;
        data["operationType"] = this.operationType;
        data["number"] = this.number;
        data["isApproved"] = this.isApproved;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["taxIncluded"] = this.taxIncluded;
        data["sum"] = this.sum ? this.sum.toJSON() : <any>undefined;
        data["tax"] = this.tax ? this.tax.toJSON() : <any>undefined;
        data["isCancelled"] = this.isCancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        data["parentOperationId"] = this.parentOperationId;
        if (Array.isArray(this.childrenOperations)) {
            data["childrenOperations"] = [];
            for (let item of this.childrenOperations)
                data["childrenOperations"].push(item.toJSON());
        }
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["authorizedDate"] = this.authorizedDate ? this.authorizedDate.toISOString() : <any>undefined;
        data["capturedDate"] = this.capturedDate ? this.capturedDate.toISOString() : <any>undefined;
        data["voidedDate"] = this.voidedDate ? this.voidedDate.toISOString() : <any>undefined;
        data["orderId"] = this.orderId;
        data["id"] = this.id;
        data["bankCardInfo"] = this.bankCardInfo ? this.bankCardInfo.toJSON() : <any>undefined;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPaymentIn {
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    purpose?: string | undefined;
    gatewayCode?: string | undefined;
    paymentMethodType?: string | undefined;
    incomingDate?: Date | undefined;
    outerId?: string | undefined;
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    sum?: Money | undefined;
    tax?: Money | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    authorizedDate?: Date | undefined;
    capturedDate?: Date | undefined;
    voidedDate?: Date | undefined;
    orderId?: string | undefined;
    id?: string | undefined;
    bankCardInfo?: BankCardInfo | undefined;
    billingAddress?: Address | undefined;
}

export class OrderLineItem implements IOrderLineItem {
    currency?: Currency | undefined;
    reserveQuantity?: number | undefined;
    quantity?: number | undefined;
    productId?: string | undefined;
    sku?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    displayName?: string | undefined;
    isGift?: boolean | undefined;
    shippingMethodCode?: string | undefined;
    fulfillmentLocationCode?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
    listPrice?: Money | undefined;
    listPriceWithTax?: Money | undefined;
    placedPrice?: Money | undefined;
    placedPriceWithTax?: Money | undefined;
    extendedPrice?: Money | undefined;
    extendedPriceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxType?: string | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    discounts?: Discount[] | undefined;

    constructor(data?: IOrderLineItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.reserveQuantity = _data["reserveQuantity"];
            this.quantity = _data["quantity"];
            this.productId = _data["productId"];
            this.sku = _data["sku"];
            this.catalogId = _data["catalogId"];
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.displayName = _data["displayName"];
            this.isGift = _data["isGift"];
            this.shippingMethodCode = _data["shippingMethodCode"];
            this.fulfillmentLocationCode = _data["fulfillmentLocationCode"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.isCancelled = _data["isCancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
            this.listPrice = _data["listPrice"] ? Money.fromJS(_data["listPrice"]) : <any>undefined;
            this.listPriceWithTax = _data["listPriceWithTax"] ? Money.fromJS(_data["listPriceWithTax"]) : <any>undefined;
            this.placedPrice = _data["placedPrice"] ? Money.fromJS(_data["placedPrice"]) : <any>undefined;
            this.placedPriceWithTax = _data["placedPriceWithTax"] ? Money.fromJS(_data["placedPriceWithTax"]) : <any>undefined;
            this.extendedPrice = _data["extendedPrice"] ? Money.fromJS(_data["extendedPrice"]) : <any>undefined;
            this.extendedPriceWithTax = _data["extendedPriceWithTax"] ? Money.fromJS(_data["extendedPriceWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.discountTotalWithTax = _data["discountTotalWithTax"] ? Money.fromJS(_data["discountTotalWithTax"]) : <any>undefined;
            this.taxType = _data["taxType"];
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            if (Array.isArray(_data["discounts"])) {
                this.discounts = [] as any;
                for (let item of _data["discounts"])
                    this.discounts!.push(Discount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderLineItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderLineItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["reserveQuantity"] = this.reserveQuantity;
        data["quantity"] = this.quantity;
        data["productId"] = this.productId;
        data["sku"] = this.sku;
        data["catalogId"] = this.catalogId;
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["displayName"] = this.displayName;
        data["isGift"] = this.isGift;
        data["shippingMethodCode"] = this.shippingMethodCode;
        data["fulfillmentLocationCode"] = this.fulfillmentLocationCode;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["isCancelled"] = this.isCancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        data["listPrice"] = this.listPrice ? this.listPrice.toJSON() : <any>undefined;
        data["listPriceWithTax"] = this.listPriceWithTax ? this.listPriceWithTax.toJSON() : <any>undefined;
        data["placedPrice"] = this.placedPrice ? this.placedPrice.toJSON() : <any>undefined;
        data["placedPriceWithTax"] = this.placedPriceWithTax ? this.placedPriceWithTax.toJSON() : <any>undefined;
        data["extendedPrice"] = this.extendedPrice ? this.extendedPrice.toJSON() : <any>undefined;
        data["extendedPriceWithTax"] = this.extendedPriceWithTax ? this.extendedPriceWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["discountTotalWithTax"] = this.discountTotalWithTax ? this.discountTotalWithTax.toJSON() : <any>undefined;
        data["taxType"] = this.taxType;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderLineItem {
    currency?: Currency | undefined;
    reserveQuantity?: number | undefined;
    quantity?: number | undefined;
    productId?: string | undefined;
    sku?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    displayName?: string | undefined;
    isGift?: boolean | undefined;
    shippingMethodCode?: string | undefined;
    fulfillmentLocationCode?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    taxDetails?: TaxDetail[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
    listPrice?: Money | undefined;
    listPriceWithTax?: Money | undefined;
    placedPrice?: Money | undefined;
    placedPriceWithTax?: Money | undefined;
    extendedPrice?: Money | undefined;
    extendedPriceWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxType?: string | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    discounts?: Discount[] | undefined;
}

export class OrderShipment implements IOrderShipment {
    readonly title?: string | undefined;
    readonly handle?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    fulfillmentCenterName?: string | undefined;
    fulfillmentCenterId?: string | undefined;
    shipmentMethodCode?: string | undefined;
    shipmentMethodOption?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    items?: ShipmentItem[] | undefined;
    packages?: ShipmentPackage[] | undefined;
    inPayments?: PaymentIn[] | undefined;
    deliveryAddress?: Address | undefined;
    taxDetails?: TaxDetail[] | undefined;
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
    taxType?: string | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    discounts?: Discount[] | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    itemsSubtotal?: Money | undefined;
    itemsSubtotalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;

    constructor(data?: IOrderShipment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).title = _data["title"];
            (<any>this).handle = _data["handle"];
            this.organizationName = _data["organizationName"];
            this.organizationId = _data["organizationId"];
            this.fulfillmentCenterName = _data["fulfillmentCenterName"];
            this.fulfillmentCenterId = _data["fulfillmentCenterId"];
            this.shipmentMethodCode = _data["shipmentMethodCode"];
            this.shipmentMethodOption = _data["shipmentMethodOption"];
            this.employeeName = _data["employeeName"];
            this.employeeId = _data["employeeId"];
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ShipmentItem.fromJS(item));
            }
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(ShipmentPackage.fromJS(item));
            }
            if (Array.isArray(_data["inPayments"])) {
                this.inPayments = [] as any;
                for (let item of _data["inPayments"])
                    this.inPayments!.push(PaymentIn.fromJS(item));
            }
            this.deliveryAddress = _data["deliveryAddress"] ? Address.fromJS(_data["deliveryAddress"]) : <any>undefined;
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.operationType = _data["operationType"];
            this.number = _data["number"];
            this.isApproved = _data["isApproved"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.taxIncluded = _data["taxIncluded"];
            this.isCancelled = _data["isCancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            this.parentOperationId = _data["parentOperationId"];
            if (Array.isArray(_data["childrenOperations"])) {
                this.childrenOperations = [] as any;
                for (let item of _data["childrenOperations"])
                    this.childrenOperations!.push(Operation.fromJS(item));
            }
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
            this.taxType = _data["taxType"];
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.taxPercentRate = _data["taxPercentRate"];
            if (Array.isArray(_data["discounts"])) {
                this.discounts = [] as any;
                for (let item of _data["discounts"])
                    this.discounts!.push(Discount.fromJS(item));
            }
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.priceWithTax = _data["priceWithTax"] ? Money.fromJS(_data["priceWithTax"]) : <any>undefined;
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.totalWithTax = _data["totalWithTax"] ? Money.fromJS(_data["totalWithTax"]) : <any>undefined;
            this.itemsSubtotal = _data["itemsSubtotal"] ? Money.fromJS(_data["itemsSubtotal"]) : <any>undefined;
            this.itemsSubtotalWithTax = _data["itemsSubtotalWithTax"] ? Money.fromJS(_data["itemsSubtotalWithTax"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderShipment {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShipment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["handle"] = this.handle;
        data["organizationName"] = this.organizationName;
        data["organizationId"] = this.organizationId;
        data["fulfillmentCenterName"] = this.fulfillmentCenterName;
        data["fulfillmentCenterId"] = this.fulfillmentCenterId;
        data["shipmentMethodCode"] = this.shipmentMethodCode;
        data["shipmentMethodOption"] = this.shipmentMethodOption;
        data["employeeName"] = this.employeeName;
        data["employeeId"] = this.employeeId;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        if (Array.isArray(this.inPayments)) {
            data["inPayments"] = [];
            for (let item of this.inPayments)
                data["inPayments"].push(item.toJSON());
        }
        data["deliveryAddress"] = this.deliveryAddress ? this.deliveryAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["operationType"] = this.operationType;
        data["number"] = this.number;
        data["isApproved"] = this.isApproved;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["taxIncluded"] = this.taxIncluded;
        data["isCancelled"] = this.isCancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        data["parentOperationId"] = this.parentOperationId;
        if (Array.isArray(this.childrenOperations)) {
            data["childrenOperations"] = [];
            for (let item of this.childrenOperations)
                data["childrenOperations"].push(item.toJSON());
        }
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        data["taxType"] = this.taxType;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["taxPercentRate"] = this.taxPercentRate;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["priceWithTax"] = this.priceWithTax ? this.priceWithTax.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["totalWithTax"] = this.totalWithTax ? this.totalWithTax.toJSON() : <any>undefined;
        data["itemsSubtotal"] = this.itemsSubtotal ? this.itemsSubtotal.toJSON() : <any>undefined;
        data["itemsSubtotalWithTax"] = this.itemsSubtotalWithTax ? this.itemsSubtotalWithTax.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderShipment {
    title?: string | undefined;
    handle?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    fulfillmentCenterName?: string | undefined;
    fulfillmentCenterId?: string | undefined;
    shipmentMethodCode?: string | undefined;
    shipmentMethodOption?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    items?: ShipmentItem[] | undefined;
    packages?: ShipmentPackage[] | undefined;
    inPayments?: PaymentIn[] | undefined;
    deliveryAddress?: Address | undefined;
    taxDetails?: TaxDetail[] | undefined;
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
    taxType?: string | undefined;
    taxTotal?: Money | undefined;
    taxPercentRate?: number | undefined;
    discounts?: Discount[] | undefined;
    price?: Money | undefined;
    priceWithTax?: Money | undefined;
    total?: Money | undefined;
    totalWithTax?: Money | undefined;
    itemsSubtotal?: Money | undefined;
    itemsSubtotalWithTax?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
}

export class Operation implements IOperation {
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    sum?: Money | undefined;
    tax?: Money | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;

    constructor(data?: IOperation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.operationType = _data["operationType"];
            this.number = _data["number"];
            this.isApproved = _data["isApproved"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.taxIncluded = _data["taxIncluded"];
            this.sum = _data["sum"] ? Money.fromJS(_data["sum"]) : <any>undefined;
            this.tax = _data["tax"] ? Money.fromJS(_data["tax"]) : <any>undefined;
            this.isCancelled = _data["isCancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            this.parentOperationId = _data["parentOperationId"];
            if (Array.isArray(_data["childrenOperations"])) {
                this.childrenOperations = [] as any;
                for (let item of _data["childrenOperations"])
                    this.childrenOperations!.push(Operation.fromJS(item));
            }
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["operationType"] = this.operationType;
        data["number"] = this.number;
        data["isApproved"] = this.isApproved;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["taxIncluded"] = this.taxIncluded;
        data["sum"] = this.sum ? this.sum.toJSON() : <any>undefined;
        data["tax"] = this.tax ? this.tax.toJSON() : <any>undefined;
        data["isCancelled"] = this.isCancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        data["parentOperationId"] = this.parentOperationId;
        if (Array.isArray(this.childrenOperations)) {
            data["childrenOperations"] = [];
            for (let item of this.childrenOperations)
                data["childrenOperations"].push(item.toJSON());
        }
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOperation {
    operationType?: string | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    taxIncluded?: boolean | undefined;
    sum?: Money | undefined;
    tax?: Money | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    parentOperationId?: string | undefined;
    childrenOperations?: Operation[] | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
}

export class ShipmentItem implements IShipmentItem {
    lineItemId?: string | undefined;
    lineItem?: OrderLineItem | undefined;
    barCode?: string | undefined;
    quantity?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;

    constructor(data?: IShipmentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineItemId = _data["lineItemId"];
            this.lineItem = _data["lineItem"] ? OrderLineItem.fromJS(_data["lineItem"]) : <any>undefined;
            this.barCode = _data["barCode"];
            this.quantity = _data["quantity"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShipmentItem {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineItemId"] = this.lineItemId;
        data["lineItem"] = this.lineItem ? this.lineItem.toJSON() : <any>undefined;
        data["barCode"] = this.barCode;
        data["quantity"] = this.quantity;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        return data; 
    }
}

export interface IShipmentItem {
    lineItemId?: string | undefined;
    lineItem?: OrderLineItem | undefined;
    barCode?: string | undefined;
    quantity?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
}

export class ShipmentPackage implements IShipmentPackage {
    barCode?: string | undefined;
    packageType?: string | undefined;
    items?: ShipmentItem[] | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;

    constructor(data?: IShipmentPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.barCode = _data["barCode"];
            this.packageType = _data["packageType"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ShipmentItem.fromJS(item));
            }
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
            this.measureUnit = _data["measureUnit"];
            this.height = _data["height"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShipmentPackage {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["barCode"] = this.barCode;
        data["packageType"] = this.packageType;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        data["measureUnit"] = this.measureUnit;
        data["height"] = this.height;
        data["length"] = this.length;
        data["width"] = this.width;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        return data; 
    }
}

export interface IShipmentPackage {
    barCode?: string | undefined;
    packageType?: string | undefined;
    items?: ShipmentItem[] | undefined;
    weightUnit?: string | undefined;
    weight?: number | undefined;
    measureUnit?: string | undefined;
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
}

export class ProductSearchCriteria implements IProductSearchCriteria {
    responseGroup?: ProductSearchCriteriaResponseGroup | undefined;
    outline?: string | undefined;
    currency?: Currency | undefined;
    priceRange?: NumericRange | undefined;
    language?: Language | undefined;
    keyword?: string | undefined;
    terms?: Term[] | undefined;
    userGroups?: string[] | undefined;
    sortBy?: string | undefined;
    vendorId?: string | undefined;
    isFuzzySearch?: boolean | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IProductSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responseGroup = _data["responseGroup"];
            this.outline = _data["outline"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.priceRange = _data["priceRange"] ? NumericRange.fromJS(_data["priceRange"]) : <any>undefined;
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
            this.keyword = _data["keyword"];
            if (Array.isArray(_data["terms"])) {
                this.terms = [] as any;
                for (let item of _data["terms"])
                    this.terms!.push(Term.fromJS(item));
            }
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(item);
            }
            this.sortBy = _data["sortBy"];
            this.vendorId = _data["vendorId"];
            this.isFuzzySearch = _data["isFuzzySearch"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): ProductSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new ProductSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseGroup"] = this.responseGroup;
        data["outline"] = this.outline;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["priceRange"] = this.priceRange ? this.priceRange.toJSON() : <any>undefined;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["keyword"] = this.keyword;
        if (Array.isArray(this.terms)) {
            data["terms"] = [];
            for (let item of this.terms)
                data["terms"].push(item.toJSON());
        }
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item);
        }
        data["sortBy"] = this.sortBy;
        data["vendorId"] = this.vendorId;
        data["isFuzzySearch"] = this.isFuzzySearch;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IProductSearchCriteria {
    responseGroup?: ProductSearchCriteriaResponseGroup | undefined;
    outline?: string | undefined;
    currency?: Currency | undefined;
    priceRange?: NumericRange | undefined;
    language?: Language | undefined;
    keyword?: string | undefined;
    terms?: Term[] | undefined;
    userGroups?: string[] | undefined;
    sortBy?: string | undefined;
    vendorId?: string | undefined;
    isFuzzySearch?: boolean | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class NumericRange implements INumericRange {
    lower?: number | undefined;
    upper?: number | undefined;
    includeLower?: boolean | undefined;
    includeUpper?: boolean | undefined;

    constructor(data?: INumericRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lower = _data["lower"];
            this.upper = _data["upper"];
            this.includeLower = _data["includeLower"];
            this.includeUpper = _data["includeUpper"];
        }
    }

    static fromJS(data: any): NumericRange {
        data = typeof data === 'object' ? data : {};
        let result = new NumericRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lower"] = this.lower;
        data["upper"] = this.upper;
        data["includeLower"] = this.includeLower;
        data["includeUpper"] = this.includeUpper;
        return data; 
    }
}

export interface INumericRange {
    lower?: number | undefined;
    upper?: number | undefined;
    includeLower?: boolean | undefined;
    includeUpper?: boolean | undefined;
}

export class Term implements ITerm {
    name?: string | undefined;
    value?: string | undefined;

    constructor(data?: ITerm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Term {
        data = typeof data === 'object' ? data : {};
        let result = new Term();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITerm {
    name?: string | undefined;
    value?: string | undefined;
}

export class SearchProductsResult implements ISearchProductsResult {
    products?: Product[] | undefined;
    aggregations?: Aggregation[] | undefined;
    metaData?: IPagedList | undefined;

    constructor(data?: ISearchProductsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(Aggregation.fromJS(item));
            }
            this.metaData = _data["metaData"] ? IPagedList.fromJS(_data["metaData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchProductsResult {
        data = typeof data === 'object' ? data : {};
        let result = new SearchProductsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        data["metaData"] = this.metaData ? this.metaData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISearchProductsResult {
    products?: Product[] | undefined;
    aggregations?: Aggregation[] | undefined;
    metaData?: IPagedList | undefined;
}

export class Aggregation implements IAggregation {
    aggregationType?: string | undefined;
    field?: string | undefined;
    label?: string | undefined;
    items?: AggregationItem[] | undefined;

    constructor(data?: IAggregation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aggregationType = _data["aggregationType"];
            this.field = _data["field"];
            this.label = _data["label"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AggregationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Aggregation {
        data = typeof data === 'object' ? data : {};
        let result = new Aggregation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregationType"] = this.aggregationType;
        data["field"] = this.field;
        data["label"] = this.label;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAggregation {
    aggregationType?: string | undefined;
    field?: string | undefined;
    label?: string | undefined;
    items?: AggregationItem[] | undefined;
}

export class IPagedList implements IIPagedList {
    readonly pageCount?: number | undefined;
    readonly totalItemCount?: number | undefined;
    readonly pageNumber?: number | undefined;
    readonly pageSize?: number | undefined;
    readonly hasPreviousPage?: boolean | undefined;
    readonly hasNextPage?: boolean | undefined;
    readonly isFirstPage?: boolean | undefined;
    readonly isLastPage?: boolean | undefined;
    readonly firstItemOnPage?: number | undefined;
    readonly lastItemOnPage?: number | undefined;

    constructor(data?: IIPagedList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pageCount = _data["pageCount"];
            (<any>this).totalItemCount = _data["totalItemCount"];
            (<any>this).pageNumber = _data["pageNumber"];
            (<any>this).pageSize = _data["pageSize"];
            (<any>this).hasPreviousPage = _data["hasPreviousPage"];
            (<any>this).hasNextPage = _data["hasNextPage"];
            (<any>this).isFirstPage = _data["isFirstPage"];
            (<any>this).isLastPage = _data["isLastPage"];
            (<any>this).firstItemOnPage = _data["firstItemOnPage"];
            (<any>this).lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static fromJS(data: any): IPagedList {
        data = typeof data === 'object' ? data : {};
        let result = new IPagedList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageCount"] = this.pageCount;
        data["totalItemCount"] = this.totalItemCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        return data; 
    }
}

export interface IIPagedList {
    pageCount?: number | undefined;
    totalItemCount?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
    hasPreviousPage?: boolean | undefined;
    hasNextPage?: boolean | undefined;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    firstItemOnPage?: number | undefined;
    lastItemOnPage?: number | undefined;
}

export class AggregationItem implements IAggregationItem {
    readonly groupType?: string | undefined;
    readonly groupLabel?: string | undefined;
    count?: number | undefined;
    isApplied?: boolean | undefined;
    label?: string | undefined;
    value?: any | undefined;
    lower?: string | undefined;
    upper?: string | undefined;

    constructor(data?: IAggregationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).groupType = _data["groupType"];
            (<any>this).groupLabel = _data["groupLabel"];
            this.count = _data["count"];
            this.isApplied = _data["isApplied"];
            this.label = _data["label"];
            this.value = _data["value"];
            this.lower = _data["lower"];
            this.upper = _data["upper"];
        }
    }

    static fromJS(data: any): AggregationItem {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupType"] = this.groupType;
        data["groupLabel"] = this.groupLabel;
        data["count"] = this.count;
        data["isApplied"] = this.isApplied;
        data["label"] = this.label;
        data["value"] = this.value;
        data["lower"] = this.lower;
        data["upper"] = this.upper;
        return data; 
    }
}

export interface IAggregationItem {
    groupType?: string | undefined;
    groupLabel?: string | undefined;
    count?: number | undefined;
    isApplied?: boolean | undefined;
    label?: string | undefined;
    value?: any | undefined;
    lower?: string | undefined;
    upper?: string | undefined;
}

export class CategorySearchCriteria implements ICategorySearchCriteria {
    responseGroup?: CategorySearchCriteriaResponseGroup | undefined;
    outline?: string | undefined;
    language?: Language | undefined;
    keyword?: string | undefined;
    sortBy?: string | undefined;
    isFuzzySearch?: boolean | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: ICategorySearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responseGroup = _data["responseGroup"];
            this.outline = _data["outline"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
            this.keyword = _data["keyword"];
            this.sortBy = _data["sortBy"];
            this.isFuzzySearch = _data["isFuzzySearch"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): CategorySearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new CategorySearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseGroup"] = this.responseGroup;
        data["outline"] = this.outline;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["keyword"] = this.keyword;
        data["sortBy"] = this.sortBy;
        data["isFuzzySearch"] = this.isFuzzySearch;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface ICategorySearchCriteria {
    responseGroup?: CategorySearchCriteriaResponseGroup | undefined;
    outline?: string | undefined;
    language?: Language | undefined;
    keyword?: string | undefined;
    sortBy?: string | undefined;
    isFuzzySearch?: boolean | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class SearchCategoriesResult implements ISearchCategoriesResult {
    categories?: Category[] | undefined;
    metaData?: IPagedList | undefined;

    constructor(data?: ISearchCategoriesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            this.metaData = _data["metaData"] ? IPagedList.fromJS(_data["metaData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchCategoriesResult {
        data = typeof data === 'object' ? data : {};
        let result = new SearchCategoriesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["metaData"] = this.metaData ? this.metaData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISearchCategoriesResult {
    categories?: Category[] | undefined;
    metaData?: IPagedList | undefined;
}

export class Category implements ICategory {
    catalogId?: string | undefined;
    parentId?: string | undefined;
    code?: string | undefined;
    taxType?: string | undefined;
    defaultSortBy?: string | undefined;
    readonly title?: string | undefined;
    name?: string | undefined;
    outline?: string | undefined;
    readonly level?: number | undefined;
    seoPath?: string | undefined;
    url?: string | undefined;
    seoInfo?: SeoInfo | undefined;
    primaryImage?: Image | undefined;
    readonly image?: Image | undefined;
    images?: Image[] | undefined;
    categories?: Category[] | undefined;
    properties?: CatalogProperty[] | undefined;
    readonly handle?: string | undefined;
    readonly indexKey?: string | undefined;
    id?: string | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.catalogId = _data["catalogId"];
            this.parentId = _data["parentId"];
            this.code = _data["code"];
            this.taxType = _data["taxType"];
            this.defaultSortBy = _data["defaultSortBy"];
            (<any>this).title = _data["title"];
            this.name = _data["name"];
            this.outline = _data["outline"];
            (<any>this).level = _data["level"];
            this.seoPath = _data["seoPath"];
            this.url = _data["url"];
            this.seoInfo = _data["seoInfo"] ? SeoInfo.fromJS(_data["seoInfo"]) : <any>undefined;
            this.primaryImage = _data["primaryImage"] ? Image.fromJS(_data["primaryImage"]) : <any>undefined;
            (<any>this).image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Image.fromJS(item));
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(CatalogProperty.fromJS(item));
            }
            (<any>this).handle = _data["handle"];
            (<any>this).indexKey = _data["indexKey"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["catalogId"] = this.catalogId;
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["taxType"] = this.taxType;
        data["defaultSortBy"] = this.defaultSortBy;
        data["title"] = this.title;
        data["name"] = this.name;
        data["outline"] = this.outline;
        data["level"] = this.level;
        data["seoPath"] = this.seoPath;
        data["url"] = this.url;
        data["seoInfo"] = this.seoInfo ? this.seoInfo.toJSON() : <any>undefined;
        data["primaryImage"] = this.primaryImage ? this.primaryImage.toJSON() : <any>undefined;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        data["handle"] = this.handle;
        data["indexKey"] = this.indexKey;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICategory {
    catalogId?: string | undefined;
    parentId?: string | undefined;
    code?: string | undefined;
    taxType?: string | undefined;
    defaultSortBy?: string | undefined;
    title?: string | undefined;
    name?: string | undefined;
    outline?: string | undefined;
    level?: number | undefined;
    seoPath?: string | undefined;
    url?: string | undefined;
    seoInfo?: SeoInfo | undefined;
    primaryImage?: Image | undefined;
    image?: Image | undefined;
    images?: Image[] | undefined;
    categories?: Category[] | undefined;
    properties?: CatalogProperty[] | undefined;
    handle?: string | undefined;
    indexKey?: string | undefined;
    id?: string | undefined;
}

export class Country implements ICountry {
    name?: string | undefined;
    code2?: string | undefined;
    code3?: string | undefined;
    regions?: CountryRegion[] | undefined;
    regionType?: string | undefined;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code2 = _data["code2"];
            this.code3 = _data["code3"];
            if (Array.isArray(_data["regions"])) {
                this.regions = [] as any;
                for (let item of _data["regions"])
                    this.regions!.push(CountryRegion.fromJS(item));
            }
            this.regionType = _data["regionType"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code2"] = this.code2;
        data["code3"] = this.code3;
        if (Array.isArray(this.regions)) {
            data["regions"] = [];
            for (let item of this.regions)
                data["regions"].push(item.toJSON());
        }
        data["regionType"] = this.regionType;
        return data; 
    }
}

export interface ICountry {
    name?: string | undefined;
    code2?: string | undefined;
    code3?: string | undefined;
    regions?: CountryRegion[] | undefined;
    regionType?: string | undefined;
}

export class CountryRegion implements ICountryRegion {
    name?: string | undefined;
    code?: string | undefined;

    constructor(data?: ICountryRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CountryRegion {
        data = typeof data === 'object' ? data : {};
        let result = new CountryRegion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        return data; 
    }
}

export interface ICountryRegion {
    name?: string | undefined;
    code?: string | undefined;
}

export class ContactForm implements IContactForm {
    contact?: { [key: string]: string[]; } | undefined;
    formType?: string | undefined;

    constructor(data?: IContactForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["contact"]) {
                this.contact = {} as any;
                for (let key in _data["contact"]) {
                    if (_data["contact"].hasOwnProperty(key))
                        this.contact![key] = _data["contact"][key] !== undefined ? _data["contact"][key] : [];
                }
            }
            this.formType = _data["formType"];
        }
    }

    static fromJS(data: any): ContactForm {
        data = typeof data === 'object' ? data : {};
        let result = new ContactForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.contact) {
            data["contact"] = {};
            for (let key in this.contact) {
                if (this.contact.hasOwnProperty(key))
                    data["contact"][key] = this.contact[key];
            }
        }
        data["formType"] = this.formType;
        return data; 
    }
}

export interface IContactForm {
    contact?: { [key: string]: string[]; } | undefined;
    formType?: string | undefined;
}

export class FulfillmentCenterSearchCriteria implements IFulfillmentCenterSearchCriteria {
    sort?: string | undefined;
    searchPhrase?: string | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IFulfillmentCenterSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.searchPhrase = _data["searchPhrase"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): FulfillmentCenterSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new FulfillmentCenterSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["searchPhrase"] = this.searchPhrase;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IFulfillmentCenterSearchCriteria {
    sort?: string | undefined;
    searchPhrase?: string | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class FulfillmentCenterSearchResult implements IFulfillmentCenterSearchResult {
    totalCount?: number | undefined;
    results?: FulfillmentCenter[] | undefined;

    constructor(data?: IFulfillmentCenterSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(FulfillmentCenter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FulfillmentCenterSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new FulfillmentCenterSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFulfillmentCenterSearchResult {
    totalCount?: number | undefined;
    results?: FulfillmentCenter[] | undefined;
}

export class FulfillmentCenter implements IFulfillmentCenter {
    name?: string | undefined;
    description?: string | undefined;
    geoLocation?: string | undefined;
    address?: Address | undefined;
    id?: string | undefined;

    constructor(data?: IFulfillmentCenter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.geoLocation = _data["geoLocation"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FulfillmentCenter {
        data = typeof data === 'object' ? data : {};
        let result = new FulfillmentCenter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["geoLocation"] = this.geoLocation;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IFulfillmentCenter {
    name?: string | undefined;
    description?: string | undefined;
    geoLocation?: string | undefined;
    address?: Address | undefined;
    id?: string | undefined;
}

export class GetCartsWithProductRequest implements IGetCartsWithProductRequest {
    listNames?: string[] | undefined;
    type?: string | undefined;
    productId?: string | undefined;

    constructor(data?: IGetCartsWithProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listNames"])) {
                this.listNames = [] as any;
                for (let item of _data["listNames"])
                    this.listNames!.push(item);
            }
            this.type = _data["type"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): GetCartsWithProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCartsWithProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listNames)) {
            data["listNames"] = [];
            for (let item of this.listNames)
                data["listNames"].push(item);
        }
        data["type"] = this.type;
        data["productId"] = this.productId;
        return data; 
    }
}

export interface IGetCartsWithProductRequest {
    listNames?: string[] | undefined;
    type?: string | undefined;
    productId?: string | undefined;
}

export class CartSearchCriteria implements ICartSearchCriteria {
    sort?: string | undefined;
    storeId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: ICartSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.storeId = _data["storeId"];
            this.name = _data["name"];
            this.type = _data["type"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): CartSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new CartSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["storeId"] = this.storeId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface ICartSearchCriteria {
    sort?: string | undefined;
    storeId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class ShoppingCartSearchResult implements IShoppingCartSearchResult {
    totalCount?: number | undefined;
    results?: ShoppingCart[] | undefined;

    constructor(data?: IShoppingCartSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ShoppingCart.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShoppingCartSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingCartSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IShoppingCartSearchResult {
    totalCount?: number | undefined;
    results?: ShoppingCart[] | undefined;
}

export class PaymentSearchCriteria implements IPaymentSearchCriteria {
    sort?: string | undefined;
    keyword?: string | undefined;
    status?: string | undefined;
    statuses?: string[] | undefined;
    storeIds?: string[] | undefined;
    orderId?: string | undefined;
    orderNumber?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    capturedStartDate?: Date | undefined;
    capturedEndDate?: Date | undefined;
    authorizedStartDate?: Date | undefined;
    authorizedEndDate?: Date | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IPaymentSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.keyword = _data["keyword"];
            this.status = _data["status"];
            if (Array.isArray(_data["statuses"])) {
                this.statuses = [] as any;
                for (let item of _data["statuses"])
                    this.statuses!.push(item);
            }
            if (Array.isArray(_data["storeIds"])) {
                this.storeIds = [] as any;
                for (let item of _data["storeIds"])
                    this.storeIds!.push(item);
            }
            this.orderId = _data["orderId"];
            this.orderNumber = _data["orderNumber"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.capturedStartDate = _data["capturedStartDate"] ? new Date(_data["capturedStartDate"].toString()) : <any>undefined;
            this.capturedEndDate = _data["capturedEndDate"] ? new Date(_data["capturedEndDate"].toString()) : <any>undefined;
            this.authorizedStartDate = _data["authorizedStartDate"] ? new Date(_data["authorizedStartDate"].toString()) : <any>undefined;
            this.authorizedEndDate = _data["authorizedEndDate"] ? new Date(_data["authorizedEndDate"].toString()) : <any>undefined;
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaymentSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["keyword"] = this.keyword;
        data["status"] = this.status;
        if (Array.isArray(this.statuses)) {
            data["statuses"] = [];
            for (let item of this.statuses)
                data["statuses"].push(item);
        }
        if (Array.isArray(this.storeIds)) {
            data["storeIds"] = [];
            for (let item of this.storeIds)
                data["storeIds"].push(item);
        }
        data["orderId"] = this.orderId;
        data["orderNumber"] = this.orderNumber;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["capturedStartDate"] = this.capturedStartDate ? this.capturedStartDate.toISOString() : <any>undefined;
        data["capturedEndDate"] = this.capturedEndDate ? this.capturedEndDate.toISOString() : <any>undefined;
        data["authorizedStartDate"] = this.authorizedStartDate ? this.authorizedStartDate.toISOString() : <any>undefined;
        data["authorizedEndDate"] = this.authorizedEndDate ? this.authorizedEndDate.toISOString() : <any>undefined;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IPaymentSearchCriteria {
    sort?: string | undefined;
    keyword?: string | undefined;
    status?: string | undefined;
    statuses?: string[] | undefined;
    storeIds?: string[] | undefined;
    orderId?: string | undefined;
    orderNumber?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    capturedStartDate?: Date | undefined;
    capturedEndDate?: Date | undefined;
    authorizedStartDate?: Date | undefined;
    authorizedEndDate?: Date | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class PaymentSearchResult implements IPaymentSearchResult {
    totalCount?: number | undefined;
    results?: PaymentIn[] | undefined;

    constructor(data?: IPaymentSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(PaymentIn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaymentSearchResult {
    totalCount?: number | undefined;
    results?: PaymentIn[] | undefined;
}

export class OrderSearchCriteria implements IOrderSearchCriteria {
    sort?: string | undefined;
    keyword?: string | undefined;
    customerId?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    status?: string | undefined;
    statuses?: string[] | undefined;
    storeIds?: string[] | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IOrderSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.keyword = _data["keyword"];
            this.customerId = _data["customerId"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            if (Array.isArray(_data["statuses"])) {
                this.statuses = [] as any;
                for (let item of _data["statuses"])
                    this.statuses!.push(item);
            }
            if (Array.isArray(_data["storeIds"])) {
                this.storeIds = [] as any;
                for (let item of _data["storeIds"])
                    this.storeIds!.push(item);
            }
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): OrderSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["keyword"] = this.keyword;
        data["customerId"] = this.customerId;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        if (Array.isArray(this.statuses)) {
            data["statuses"] = [];
            for (let item of this.statuses)
                data["statuses"].push(item);
        }
        if (Array.isArray(this.storeIds)) {
            data["storeIds"] = [];
            for (let item of this.storeIds)
                data["storeIds"].push(item);
        }
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IOrderSearchCriteria {
    sort?: string | undefined;
    keyword?: string | undefined;
    customerId?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    status?: string | undefined;
    statuses?: string[] | undefined;
    storeIds?: string[] | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class CustomerOrderSearchResult implements ICustomerOrderSearchResult {
    totalCount?: number | undefined;
    results?: CustomerOrder[] | undefined;

    constructor(data?: ICustomerOrderSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CustomerOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerOrderSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerOrderSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICustomerOrderSearchResult {
    totalCount?: number | undefined;
    results?: CustomerOrder[] | undefined;
}

export class NewPaymentData implements INewPaymentData {
    payment?: PaymentIn | undefined;
    paymentMethods?: PaymentMethod[] | undefined;
    order?: CustomerOrder | undefined;

    constructor(data?: INewPaymentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payment = _data["payment"] ? PaymentIn.fromJS(_data["payment"]) : <any>undefined;
            if (Array.isArray(_data["paymentMethods"])) {
                this.paymentMethods = [] as any;
                for (let item of _data["paymentMethods"])
                    this.paymentMethods!.push(PaymentMethod.fromJS(item));
            }
            this.order = _data["order"] ? CustomerOrder.fromJS(_data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NewPaymentData {
        data = typeof data === 'object' ? data : {};
        let result = new NewPaymentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payment"] = this.payment ? this.payment.toJSON() : <any>undefined;
        if (Array.isArray(this.paymentMethods)) {
            data["paymentMethods"] = [];
            for (let item of this.paymentMethods)
                data["paymentMethods"].push(item.toJSON());
        }
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        return data; 
    }
}

export interface INewPaymentData {
    payment?: PaymentIn | undefined;
    paymentMethods?: PaymentMethod[] | undefined;
    order?: CustomerOrder | undefined;
}

export class ProcessOrderPaymentResult implements IProcessOrderPaymentResult {
    orderProcessingResult?: ProcessPaymentResult | undefined;
    paymentMethod?: PaymentMethod | undefined;

    constructor(data?: IProcessOrderPaymentResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderProcessingResult = _data["orderProcessingResult"] ? ProcessPaymentResult.fromJS(_data["orderProcessingResult"]) : <any>undefined;
            this.paymentMethod = _data["paymentMethod"] ? PaymentMethod.fromJS(_data["paymentMethod"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProcessOrderPaymentResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessOrderPaymentResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderProcessingResult"] = this.orderProcessingResult ? this.orderProcessingResult.toJSON() : <any>undefined;
        data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IProcessOrderPaymentResult {
    orderProcessingResult?: ProcessPaymentResult | undefined;
    paymentMethod?: PaymentMethod | undefined;
}

export class ChangeOrderStatus implements IChangeOrderStatus {
    newStatus!: string;

    constructor(data?: IChangeOrderStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newStatus = _data["newStatus"];
        }
    }

    static fromJS(data: any): ChangeOrderStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeOrderStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newStatus"] = this.newStatus;
        return data; 
    }
}

export interface IChangeOrderStatus {
    newStatus: string;
}

export class QuoteSearchCriteria implements IQuoteSearchCriteria {
    customerId?: string | undefined;
    sort?: string | undefined;
    storeId?: string | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: IQuoteSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.sort = _data["sort"];
            this.storeId = _data["storeId"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): QuoteSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["sort"] = this.sort;
        data["storeId"] = this.storeId;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IQuoteSearchCriteria {
    customerId?: string | undefined;
    sort?: string | undefined;
    storeId?: string | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class QuoteSearchResult implements IQuoteSearchResult {
    totalCount?: number | undefined;
    results?: QuoteRequest[] | undefined;

    constructor(data?: IQuoteSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(QuoteRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuoteSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQuoteSearchResult {
    totalCount?: number | undefined;
    results?: QuoteRequest[] | undefined;
}

export class QuoteRequest implements IQuoteRequest {
    number?: string | undefined;
    storeId?: string | undefined;
    channelId?: string | undefined;
    isAnonymous?: boolean | undefined;
    customerId?: string | undefined;
    customerName?: string | undefined;
    customer?: User | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeId?: string | undefined;
    employeeName?: string | undefined;
    expirationDate?: Date | undefined;
    reminderDate?: Date | undefined;
    enableNotification?: boolean | undefined;
    isLocked?: boolean | undefined;
    status?: string | undefined;
    tag?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    totals?: QuoteRequestTotals | undefined;
    coupon?: Coupon | undefined;
    manualShippingTotal?: Money | undefined;
    manualSubTotal?: Money | undefined;
    manualRelDiscountAmount?: Money | undefined;
    shipmentMethod?: ShippingMethod | undefined;
    addresses?: Address[] | undefined;
    items?: QuoteItem[] | undefined;
    attachments?: Attachment[] | undefined;
    taxDetails?: TaxDetail[] | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    readonly billingAddress?: Address | undefined;
    readonly shippingAddress?: Address | undefined;
    readonly requestShippingQuote?: boolean | undefined;
    readonly itemsCount?: number | undefined;
    readonly email?: string | undefined;
    language?: Language | undefined;
    id?: string | undefined;

    constructor(data?: IQuoteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.storeId = _data["storeId"];
            this.channelId = _data["channelId"];
            this.isAnonymous = _data["isAnonymous"];
            this.customerId = _data["customerId"];
            this.customerName = _data["customerName"];
            this.customer = _data["customer"] ? User.fromJS(_data["customer"]) : <any>undefined;
            this.organizationName = _data["organizationName"];
            this.organizationId = _data["organizationId"];
            this.employeeId = _data["employeeId"];
            this.employeeName = _data["employeeName"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
            this.reminderDate = _data["reminderDate"] ? new Date(_data["reminderDate"].toString()) : <any>undefined;
            this.enableNotification = _data["enableNotification"];
            this.isLocked = _data["isLocked"];
            this.status = _data["status"];
            this.tag = _data["tag"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.totals = _data["totals"] ? QuoteRequestTotals.fromJS(_data["totals"]) : <any>undefined;
            this.coupon = _data["coupon"] ? Coupon.fromJS(_data["coupon"]) : <any>undefined;
            this.manualShippingTotal = _data["manualShippingTotal"] ? Money.fromJS(_data["manualShippingTotal"]) : <any>undefined;
            this.manualSubTotal = _data["manualSubTotal"] ? Money.fromJS(_data["manualSubTotal"]) : <any>undefined;
            this.manualRelDiscountAmount = _data["manualRelDiscountAmount"] ? Money.fromJS(_data["manualRelDiscountAmount"]) : <any>undefined;
            this.shipmentMethod = _data["shipmentMethod"] ? ShippingMethod.fromJS(_data["shipmentMethod"]) : <any>undefined;
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuoteItem.fromJS(item));
            }
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachment.fromJS(item));
            }
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.isCancelled = _data["isCancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            this.objectType = _data["objectType"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            (<any>this).billingAddress = _data["billingAddress"] ? Address.fromJS(_data["billingAddress"]) : <any>undefined;
            (<any>this).shippingAddress = _data["shippingAddress"] ? Address.fromJS(_data["shippingAddress"]) : <any>undefined;
            (<any>this).requestShippingQuote = _data["requestShippingQuote"];
            (<any>this).itemsCount = _data["itemsCount"];
            (<any>this).email = _data["email"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): QuoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["storeId"] = this.storeId;
        data["channelId"] = this.channelId;
        data["isAnonymous"] = this.isAnonymous;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["organizationName"] = this.organizationName;
        data["organizationId"] = this.organizationId;
        data["employeeId"] = this.employeeId;
        data["employeeName"] = this.employeeName;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["reminderDate"] = this.reminderDate ? this.reminderDate.toISOString() : <any>undefined;
        data["enableNotification"] = this.enableNotification;
        data["isLocked"] = this.isLocked;
        data["status"] = this.status;
        data["tag"] = this.tag;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["totals"] = this.totals ? this.totals.toJSON() : <any>undefined;
        data["coupon"] = this.coupon ? this.coupon.toJSON() : <any>undefined;
        data["manualShippingTotal"] = this.manualShippingTotal ? this.manualShippingTotal.toJSON() : <any>undefined;
        data["manualSubTotal"] = this.manualSubTotal ? this.manualSubTotal.toJSON() : <any>undefined;
        data["manualRelDiscountAmount"] = this.manualRelDiscountAmount ? this.manualRelDiscountAmount.toJSON() : <any>undefined;
        data["shipmentMethod"] = this.shipmentMethod ? this.shipmentMethod.toJSON() : <any>undefined;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["isCancelled"] = this.isCancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        data["objectType"] = this.objectType;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        data["requestShippingQuote"] = this.requestShippingQuote;
        data["itemsCount"] = this.itemsCount;
        data["email"] = this.email;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IQuoteRequest {
    number?: string | undefined;
    storeId?: string | undefined;
    channelId?: string | undefined;
    isAnonymous?: boolean | undefined;
    customerId?: string | undefined;
    customerName?: string | undefined;
    customer?: User | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeId?: string | undefined;
    employeeName?: string | undefined;
    expirationDate?: Date | undefined;
    reminderDate?: Date | undefined;
    enableNotification?: boolean | undefined;
    isLocked?: boolean | undefined;
    status?: string | undefined;
    tag?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    totals?: QuoteRequestTotals | undefined;
    coupon?: Coupon | undefined;
    manualShippingTotal?: Money | undefined;
    manualSubTotal?: Money | undefined;
    manualRelDiscountAmount?: Money | undefined;
    shipmentMethod?: ShippingMethod | undefined;
    addresses?: Address[] | undefined;
    items?: QuoteItem[] | undefined;
    attachments?: Attachment[] | undefined;
    taxDetails?: TaxDetail[] | undefined;
    isCancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    objectType?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    billingAddress?: Address | undefined;
    shippingAddress?: Address | undefined;
    requestShippingQuote?: boolean | undefined;
    itemsCount?: number | undefined;
    email?: string | undefined;
    language?: Language | undefined;
    id?: string | undefined;
}

export class QuoteRequestTotals implements IQuoteRequestTotals {
    originalSubTotalExlTax?: Money | undefined;
    subTotalExlTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    taxTotal?: Money | undefined;
    adjustmentQuoteExlTax?: Money | undefined;
    grandTotalExlTax?: Money | undefined;
    grandTotalInclTax?: Money | undefined;

    constructor(data?: IQuoteRequestTotals) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.originalSubTotalExlTax = _data["originalSubTotalExlTax"] ? Money.fromJS(_data["originalSubTotalExlTax"]) : <any>undefined;
            this.subTotalExlTax = _data["subTotalExlTax"] ? Money.fromJS(_data["subTotalExlTax"]) : <any>undefined;
            this.shippingTotal = _data["shippingTotal"] ? Money.fromJS(_data["shippingTotal"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.adjustmentQuoteExlTax = _data["adjustmentQuoteExlTax"] ? Money.fromJS(_data["adjustmentQuoteExlTax"]) : <any>undefined;
            this.grandTotalExlTax = _data["grandTotalExlTax"] ? Money.fromJS(_data["grandTotalExlTax"]) : <any>undefined;
            this.grandTotalInclTax = _data["grandTotalInclTax"] ? Money.fromJS(_data["grandTotalInclTax"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QuoteRequestTotals {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteRequestTotals();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalSubTotalExlTax"] = this.originalSubTotalExlTax ? this.originalSubTotalExlTax.toJSON() : <any>undefined;
        data["subTotalExlTax"] = this.subTotalExlTax ? this.subTotalExlTax.toJSON() : <any>undefined;
        data["shippingTotal"] = this.shippingTotal ? this.shippingTotal.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["adjustmentQuoteExlTax"] = this.adjustmentQuoteExlTax ? this.adjustmentQuoteExlTax.toJSON() : <any>undefined;
        data["grandTotalExlTax"] = this.grandTotalExlTax ? this.grandTotalExlTax.toJSON() : <any>undefined;
        data["grandTotalInclTax"] = this.grandTotalInclTax ? this.grandTotalInclTax.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQuoteRequestTotals {
    originalSubTotalExlTax?: Money | undefined;
    subTotalExlTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    taxTotal?: Money | undefined;
    adjustmentQuoteExlTax?: Money | undefined;
    grandTotalExlTax?: Money | undefined;
    grandTotalInclTax?: Money | undefined;
}

export class QuoteItem implements IQuoteItem {
    currency?: Currency | undefined;
    listPrice?: Money | undefined;
    salePrice?: Money | undefined;
    productId?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    name?: string | undefined;
    comment?: string | undefined;
    imageUrl?: string | undefined;
    sku?: string | undefined;
    taxType?: string | undefined;
    selectedTierPrice?: TierPrice | undefined;
    proposalPrices?: TierPrice[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;

    constructor(data?: IQuoteItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            this.listPrice = _data["listPrice"] ? Money.fromJS(_data["listPrice"]) : <any>undefined;
            this.salePrice = _data["salePrice"] ? Money.fromJS(_data["salePrice"]) : <any>undefined;
            this.productId = _data["productId"];
            this.catalogId = _data["catalogId"];
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
            this.comment = _data["comment"];
            this.imageUrl = _data["imageUrl"];
            this.sku = _data["sku"];
            this.taxType = _data["taxType"];
            this.selectedTierPrice = _data["selectedTierPrice"] ? TierPrice.fromJS(_data["selectedTierPrice"]) : <any>undefined;
            if (Array.isArray(_data["proposalPrices"])) {
                this.proposalPrices = [] as any;
                for (let item of _data["proposalPrices"])
                    this.proposalPrices!.push(TierPrice.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): QuoteItem {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["listPrice"] = this.listPrice ? this.listPrice.toJSON() : <any>undefined;
        data["salePrice"] = this.salePrice ? this.salePrice.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["catalogId"] = this.catalogId;
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        data["comment"] = this.comment;
        data["imageUrl"] = this.imageUrl;
        data["sku"] = this.sku;
        data["taxType"] = this.taxType;
        data["selectedTierPrice"] = this.selectedTierPrice ? this.selectedTierPrice.toJSON() : <any>undefined;
        if (Array.isArray(this.proposalPrices)) {
            data["proposalPrices"] = [];
            for (let item of this.proposalPrices)
                data["proposalPrices"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        return data; 
    }
}

export interface IQuoteItem {
    currency?: Currency | undefined;
    listPrice?: Money | undefined;
    salePrice?: Money | undefined;
    productId?: string | undefined;
    catalogId?: string | undefined;
    categoryId?: string | undefined;
    name?: string | undefined;
    comment?: string | undefined;
    imageUrl?: string | undefined;
    sku?: string | undefined;
    taxType?: string | undefined;
    selectedTierPrice?: TierPrice | undefined;
    proposalPrices?: TierPrice[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
}

export class Attachment implements IAttachment {
    name?: string | undefined;
    url?: string | undefined;
    mimeType?: string | undefined;
    size?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;

    constructor(data?: IAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
            this.mimeType = _data["mimeType"];
            this.size = _data["size"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Attachment {
        data = typeof data === 'object' ? data : {};
        let result = new Attachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        data["mimeType"] = this.mimeType;
        data["size"] = this.size;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAttachment {
    name?: string | undefined;
    url?: string | undefined;
    mimeType?: string | undefined;
    size?: number | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    id?: string | undefined;
}

export class QuoteItemsCount implements IQuoteItemsCount {
    id?: string | undefined;
    itemsCount?: number | undefined;

    constructor(data?: IQuoteItemsCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.itemsCount = _data["itemsCount"];
        }
    }

    static fromJS(data: any): QuoteItemsCount {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteItemsCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemsCount"] = this.itemsCount;
        return data; 
    }
}

export interface IQuoteItemsCount {
    id?: string | undefined;
    itemsCount?: number | undefined;
}

export class QuoteRequestFormModel implements IQuoteRequestFormModel {
    tag?: string | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    billingAddress?: Address | undefined;
    shippingAddress?: Address | undefined;
    items?: QuoteItemFormModel[] | undefined;
    id?: string | undefined;

    constructor(data?: IQuoteRequestFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.billingAddress = _data["billingAddress"] ? Address.fromJS(_data["billingAddress"]) : <any>undefined;
            this.shippingAddress = _data["shippingAddress"] ? Address.fromJS(_data["shippingAddress"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuoteItemFormModel.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): QuoteRequestFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteRequestFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IQuoteRequestFormModel {
    tag?: string | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    billingAddress?: Address | undefined;
    shippingAddress?: Address | undefined;
    items?: QuoteItemFormModel[] | undefined;
    id?: string | undefined;
}

export class QuoteItemFormModel implements IQuoteItemFormModel {
    id?: string | undefined;
    comment?: string | undefined;
    selectedTierPrice?: TierPriceFormModel | undefined;
    proposalPrices?: TierPriceFormModel[] | undefined;

    constructor(data?: IQuoteItemFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.comment = _data["comment"];
            this.selectedTierPrice = _data["selectedTierPrice"] ? TierPriceFormModel.fromJS(_data["selectedTierPrice"]) : <any>undefined;
            if (Array.isArray(_data["proposalPrices"])) {
                this.proposalPrices = [] as any;
                for (let item of _data["proposalPrices"])
                    this.proposalPrices!.push(TierPriceFormModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuoteItemFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteItemFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["comment"] = this.comment;
        data["selectedTierPrice"] = this.selectedTierPrice ? this.selectedTierPrice.toJSON() : <any>undefined;
        if (Array.isArray(this.proposalPrices)) {
            data["proposalPrices"] = [];
            for (let item of this.proposalPrices)
                data["proposalPrices"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQuoteItemFormModel {
    id?: string | undefined;
    comment?: string | undefined;
    selectedTierPrice?: TierPriceFormModel | undefined;
    proposalPrices?: TierPriceFormModel[] | undefined;
}

export class TierPriceFormModel implements ITierPriceFormModel {
    price?: number | undefined;
    quantity?: number | undefined;

    constructor(data?: ITierPriceFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.price = _data["price"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): TierPriceFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new TierPriceFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface ITierPriceFormModel {
    price?: number | undefined;
    quantity?: number | undefined;
}

export class AddQuoteItem implements IAddQuoteItem {
    productId?: string | undefined;
    quantity?: number | undefined;

    constructor(data?: IAddQuoteItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): AddQuoteItem {
        data = typeof data === 'object' ? data : {};
        let result = new AddQuoteItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IAddQuoteItem {
    productId?: string | undefined;
    quantity?: number | undefined;
}

export class RecommendationEvalContext implements IRecommendationEvalContext {
    provider?: string | undefined;
    type?: string | undefined;
    storeId?: string | undefined;
    userId?: string | undefined;
    productIds?: string[] | undefined;
    take?: number | undefined;

    constructor(data?: IRecommendationEvalContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provider = _data["provider"];
            this.type = _data["type"];
            this.storeId = _data["storeId"];
            this.userId = _data["userId"];
            if (Array.isArray(_data["productIds"])) {
                this.productIds = [] as any;
                for (let item of _data["productIds"])
                    this.productIds!.push(item);
            }
            this.take = _data["take"];
        }
    }

    static fromJS(data: any): RecommendationEvalContext {
        data = typeof data === 'object' ? data : {};
        let result = new RecommendationEvalContext();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["type"] = this.type;
        data["storeId"] = this.storeId;
        data["userId"] = this.userId;
        if (Array.isArray(this.productIds)) {
            data["productIds"] = [];
            for (let item of this.productIds)
                data["productIds"].push(item);
        }
        data["take"] = this.take;
        return data; 
    }
}

export interface IRecommendationEvalContext {
    provider?: string | undefined;
    type?: string | undefined;
    storeId?: string | undefined;
    userId?: string | undefined;
    productIds?: string[] | undefined;
    take?: number | undefined;
}

export class SubscriptionSearchCriteria implements ISubscriptionSearchCriteria {
    number?: string | undefined;
    customerId?: string | undefined;
    sort?: string | undefined;
    modifiedSinceDate?: Date | undefined;
    responseGroup?: SubscriptionSearchCriteriaResponseGroup | undefined;
    readonly start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;

    constructor(data?: ISubscriptionSearchCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.customerId = _data["customerId"];
            this.sort = _data["sort"];
            this.modifiedSinceDate = _data["modifiedSinceDate"] ? new Date(_data["modifiedSinceDate"].toString()) : <any>undefined;
            this.responseGroup = _data["responseGroup"];
            (<any>this).start = _data["start"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): SubscriptionSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["customerId"] = this.customerId;
        data["sort"] = this.sort;
        data["modifiedSinceDate"] = this.modifiedSinceDate ? this.modifiedSinceDate.toISOString() : <any>undefined;
        data["responseGroup"] = this.responseGroup;
        data["start"] = this.start;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface ISubscriptionSearchCriteria {
    number?: string | undefined;
    customerId?: string | undefined;
    sort?: string | undefined;
    modifiedSinceDate?: Date | undefined;
    responseGroup?: SubscriptionSearchCriteriaResponseGroup | undefined;
    start?: number | undefined;
    pageNumber?: number | undefined;
    pageSize?: number | undefined;
}

export class SubscriptionSearchResult implements ISubscriptionSearchResult {
    totalCount?: number | undefined;
    results?: Subscription[] | undefined;

    constructor(data?: ISubscriptionSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Subscription.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubscriptionSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISubscriptionSearchResult {
    totalCount?: number | undefined;
    results?: Subscription[] | undefined;
}

export class Subscription implements ISubscription {
    balance?: Money | undefined;
    interval?: SubscriptionInterval | undefined;
    intervalCount?: number | undefined;
    trialPeriodDays?: number | undefined;
    customerOrders?: CustomerOrder[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    trialSart?: Date | undefined;
    trialEnd?: Date | undefined;
    currentPeriodStart?: Date | undefined;
    currentPeriodEnd?: Date | undefined;
    paymentMethodType?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    channelId?: string | undefined;
    storeId?: string | undefined;
    storeName?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    addresses?: Address[] | undefined;
    readonly financialStatus?: string | undefined;
    inPayments?: PaymentIn[] | undefined;
    items?: OrderLineItem[] | undefined;
    shipments?: OrderShipment[] | undefined;
    discount?: Discount | undefined;
    taxDetails?: TaxDetail[] | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    readonly currencyCode?: string | undefined;
    isCancelled?: boolean | undefined;
    readonly cancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    discounts?: Discount[] | undefined;
    total?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    shippingTaxTotal?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentDiscountTotal?: Money | undefined;
    paymentDiscountTotalWithTax?: Money | undefined;
    paymentTaxTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    shippingDiscountTotalWithTax?: Money | undefined;
    shippingDiscountTotal?: Money | undefined;
    subTotalTaxTotal?: Money | undefined;
    subTotalDiscount?: Money | undefined;
    subTotalDiscountWithTax?: Money | undefined;
    subscriptionNumber?: string | undefined;
    id?: string | undefined;

    constructor(data?: ISubscription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.balance = _data["balance"] ? Money.fromJS(_data["balance"]) : <any>undefined;
            this.interval = _data["interval"];
            this.intervalCount = _data["intervalCount"];
            this.trialPeriodDays = _data["trialPeriodDays"];
            if (Array.isArray(_data["customerOrders"])) {
                this.customerOrders = [] as any;
                for (let item of _data["customerOrders"])
                    this.customerOrders!.push(CustomerOrder.fromJS(item));
            }
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.trialSart = _data["trialSart"] ? new Date(_data["trialSart"].toString()) : <any>undefined;
            this.trialEnd = _data["trialEnd"] ? new Date(_data["trialEnd"].toString()) : <any>undefined;
            this.currentPeriodStart = _data["currentPeriodStart"] ? new Date(_data["currentPeriodStart"].toString()) : <any>undefined;
            this.currentPeriodEnd = _data["currentPeriodEnd"] ? new Date(_data["currentPeriodEnd"].toString()) : <any>undefined;
            this.paymentMethodType = _data["paymentMethodType"];
            this.customerName = _data["customerName"];
            this.customerId = _data["customerId"];
            this.channelId = _data["channelId"];
            this.storeId = _data["storeId"];
            this.storeName = _data["storeName"];
            this.organizationName = _data["organizationName"];
            this.organizationId = _data["organizationId"];
            this.employeeName = _data["employeeName"];
            this.employeeId = _data["employeeId"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            (<any>this).financialStatus = _data["financialStatus"];
            if (Array.isArray(_data["inPayments"])) {
                this.inPayments = [] as any;
                for (let item of _data["inPayments"])
                    this.inPayments!.push(PaymentIn.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderLineItem.fromJS(item));
            }
            if (Array.isArray(_data["shipments"])) {
                this.shipments = [] as any;
                for (let item of _data["shipments"])
                    this.shipments!.push(OrderShipment.fromJS(item));
            }
            this.discount = _data["discount"] ? Discount.fromJS(_data["discount"]) : <any>undefined;
            if (Array.isArray(_data["taxDetails"])) {
                this.taxDetails = [] as any;
                for (let item of _data["taxDetails"])
                    this.taxDetails!.push(TaxDetail.fromJS(item));
            }
            this.number = _data["number"];
            this.isApproved = _data["isApproved"];
            this.status = _data["status"];
            this.comment = _data["comment"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
            (<any>this).currencyCode = _data["currencyCode"];
            this.isCancelled = _data["isCancelled"];
            (<any>this).cancelled = _data["cancelled"];
            this.cancelledDate = _data["cancelledDate"] ? new Date(_data["cancelledDate"].toString()) : <any>undefined;
            this.cancelReason = _data["cancelReason"];
            if (Array.isArray(_data["dynamicProperties"])) {
                this.dynamicProperties = [] as any;
                for (let item of _data["dynamicProperties"])
                    this.dynamicProperties!.push(DynamicProperty.fromJS(item));
            }
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            if (Array.isArray(_data["discounts"])) {
                this.discounts = [] as any;
                for (let item of _data["discounts"])
                    this.discounts!.push(Discount.fromJS(item));
            }
            this.total = _data["total"] ? Money.fromJS(_data["total"]) : <any>undefined;
            this.discountAmount = _data["discountAmount"] ? Money.fromJS(_data["discountAmount"]) : <any>undefined;
            this.discountAmountWithTax = _data["discountAmountWithTax"] ? Money.fromJS(_data["discountAmountWithTax"]) : <any>undefined;
            this.subTotal = _data["subTotal"] ? Money.fromJS(_data["subTotal"]) : <any>undefined;
            this.subTotalWithTax = _data["subTotalWithTax"] ? Money.fromJS(_data["subTotalWithTax"]) : <any>undefined;
            this.shippingTotal = _data["shippingTotal"] ? Money.fromJS(_data["shippingTotal"]) : <any>undefined;
            this.shippingTotalWithTax = _data["shippingTotalWithTax"] ? Money.fromJS(_data["shippingTotalWithTax"]) : <any>undefined;
            this.shippingTaxTotal = _data["shippingTaxTotal"] ? Money.fromJS(_data["shippingTaxTotal"]) : <any>undefined;
            this.shippingPrice = _data["shippingPrice"] ? Money.fromJS(_data["shippingPrice"]) : <any>undefined;
            this.shippingPriceWithTax = _data["shippingPriceWithTax"] ? Money.fromJS(_data["shippingPriceWithTax"]) : <any>undefined;
            this.paymentTotal = _data["paymentTotal"] ? Money.fromJS(_data["paymentTotal"]) : <any>undefined;
            this.paymentTotalWithTax = _data["paymentTotalWithTax"] ? Money.fromJS(_data["paymentTotalWithTax"]) : <any>undefined;
            this.paymentPrice = _data["paymentPrice"] ? Money.fromJS(_data["paymentPrice"]) : <any>undefined;
            this.paymentPriceWithTax = _data["paymentPriceWithTax"] ? Money.fromJS(_data["paymentPriceWithTax"]) : <any>undefined;
            this.paymentDiscountTotal = _data["paymentDiscountTotal"] ? Money.fromJS(_data["paymentDiscountTotal"]) : <any>undefined;
            this.paymentDiscountTotalWithTax = _data["paymentDiscountTotalWithTax"] ? Money.fromJS(_data["paymentDiscountTotalWithTax"]) : <any>undefined;
            this.paymentTaxTotal = _data["paymentTaxTotal"] ? Money.fromJS(_data["paymentTaxTotal"]) : <any>undefined;
            this.discountTotal = _data["discountTotal"] ? Money.fromJS(_data["discountTotal"]) : <any>undefined;
            this.discountTotalWithTax = _data["discountTotalWithTax"] ? Money.fromJS(_data["discountTotalWithTax"]) : <any>undefined;
            this.taxTotal = _data["taxTotal"] ? Money.fromJS(_data["taxTotal"]) : <any>undefined;
            this.shippingDiscountTotalWithTax = _data["shippingDiscountTotalWithTax"] ? Money.fromJS(_data["shippingDiscountTotalWithTax"]) : <any>undefined;
            this.shippingDiscountTotal = _data["shippingDiscountTotal"] ? Money.fromJS(_data["shippingDiscountTotal"]) : <any>undefined;
            this.subTotalTaxTotal = _data["subTotalTaxTotal"] ? Money.fromJS(_data["subTotalTaxTotal"]) : <any>undefined;
            this.subTotalDiscount = _data["subTotalDiscount"] ? Money.fromJS(_data["subTotalDiscount"]) : <any>undefined;
            this.subTotalDiscountWithTax = _data["subTotalDiscountWithTax"] ? Money.fromJS(_data["subTotalDiscountWithTax"]) : <any>undefined;
            this.subscriptionNumber = _data["subscriptionNumber"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Subscription {
        data = typeof data === 'object' ? data : {};
        let result = new Subscription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance ? this.balance.toJSON() : <any>undefined;
        data["interval"] = this.interval;
        data["intervalCount"] = this.intervalCount;
        data["trialPeriodDays"] = this.trialPeriodDays;
        if (Array.isArray(this.customerOrders)) {
            data["customerOrders"] = [];
            for (let item of this.customerOrders)
                data["customerOrders"].push(item.toJSON());
        }
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["trialSart"] = this.trialSart ? this.trialSart.toISOString() : <any>undefined;
        data["trialEnd"] = this.trialEnd ? this.trialEnd.toISOString() : <any>undefined;
        data["currentPeriodStart"] = this.currentPeriodStart ? this.currentPeriodStart.toISOString() : <any>undefined;
        data["currentPeriodEnd"] = this.currentPeriodEnd ? this.currentPeriodEnd.toISOString() : <any>undefined;
        data["paymentMethodType"] = this.paymentMethodType;
        data["customerName"] = this.customerName;
        data["customerId"] = this.customerId;
        data["channelId"] = this.channelId;
        data["storeId"] = this.storeId;
        data["storeName"] = this.storeName;
        data["organizationName"] = this.organizationName;
        data["organizationId"] = this.organizationId;
        data["employeeName"] = this.employeeName;
        data["employeeId"] = this.employeeId;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["financialStatus"] = this.financialStatus;
        if (Array.isArray(this.inPayments)) {
            data["inPayments"] = [];
            for (let item of this.inPayments)
                data["inPayments"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.shipments)) {
            data["shipments"] = [];
            for (let item of this.shipments)
                data["shipments"].push(item.toJSON());
        }
        data["discount"] = this.discount ? this.discount.toJSON() : <any>undefined;
        if (Array.isArray(this.taxDetails)) {
            data["taxDetails"] = [];
            for (let item of this.taxDetails)
                data["taxDetails"].push(item.toJSON());
        }
        data["number"] = this.number;
        data["isApproved"] = this.isApproved;
        data["status"] = this.status;
        data["comment"] = this.comment;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["currencyCode"] = this.currencyCode;
        data["isCancelled"] = this.isCancelled;
        data["cancelled"] = this.cancelled;
        data["cancelledDate"] = this.cancelledDate ? this.cancelledDate.toISOString() : <any>undefined;
        data["cancelReason"] = this.cancelReason;
        if (Array.isArray(this.dynamicProperties)) {
            data["dynamicProperties"] = [];
            for (let item of this.dynamicProperties)
                data["dynamicProperties"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        if (Array.isArray(this.discounts)) {
            data["discounts"] = [];
            for (let item of this.discounts)
                data["discounts"].push(item.toJSON());
        }
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        data["discountAmount"] = this.discountAmount ? this.discountAmount.toJSON() : <any>undefined;
        data["discountAmountWithTax"] = this.discountAmountWithTax ? this.discountAmountWithTax.toJSON() : <any>undefined;
        data["subTotal"] = this.subTotal ? this.subTotal.toJSON() : <any>undefined;
        data["subTotalWithTax"] = this.subTotalWithTax ? this.subTotalWithTax.toJSON() : <any>undefined;
        data["shippingTotal"] = this.shippingTotal ? this.shippingTotal.toJSON() : <any>undefined;
        data["shippingTotalWithTax"] = this.shippingTotalWithTax ? this.shippingTotalWithTax.toJSON() : <any>undefined;
        data["shippingTaxTotal"] = this.shippingTaxTotal ? this.shippingTaxTotal.toJSON() : <any>undefined;
        data["shippingPrice"] = this.shippingPrice ? this.shippingPrice.toJSON() : <any>undefined;
        data["shippingPriceWithTax"] = this.shippingPriceWithTax ? this.shippingPriceWithTax.toJSON() : <any>undefined;
        data["paymentTotal"] = this.paymentTotal ? this.paymentTotal.toJSON() : <any>undefined;
        data["paymentTotalWithTax"] = this.paymentTotalWithTax ? this.paymentTotalWithTax.toJSON() : <any>undefined;
        data["paymentPrice"] = this.paymentPrice ? this.paymentPrice.toJSON() : <any>undefined;
        data["paymentPriceWithTax"] = this.paymentPriceWithTax ? this.paymentPriceWithTax.toJSON() : <any>undefined;
        data["paymentDiscountTotal"] = this.paymentDiscountTotal ? this.paymentDiscountTotal.toJSON() : <any>undefined;
        data["paymentDiscountTotalWithTax"] = this.paymentDiscountTotalWithTax ? this.paymentDiscountTotalWithTax.toJSON() : <any>undefined;
        data["paymentTaxTotal"] = this.paymentTaxTotal ? this.paymentTaxTotal.toJSON() : <any>undefined;
        data["discountTotal"] = this.discountTotal ? this.discountTotal.toJSON() : <any>undefined;
        data["discountTotalWithTax"] = this.discountTotalWithTax ? this.discountTotalWithTax.toJSON() : <any>undefined;
        data["taxTotal"] = this.taxTotal ? this.taxTotal.toJSON() : <any>undefined;
        data["shippingDiscountTotalWithTax"] = this.shippingDiscountTotalWithTax ? this.shippingDiscountTotalWithTax.toJSON() : <any>undefined;
        data["shippingDiscountTotal"] = this.shippingDiscountTotal ? this.shippingDiscountTotal.toJSON() : <any>undefined;
        data["subTotalTaxTotal"] = this.subTotalTaxTotal ? this.subTotalTaxTotal.toJSON() : <any>undefined;
        data["subTotalDiscount"] = this.subTotalDiscount ? this.subTotalDiscount.toJSON() : <any>undefined;
        data["subTotalDiscountWithTax"] = this.subTotalDiscountWithTax ? this.subTotalDiscountWithTax.toJSON() : <any>undefined;
        data["subscriptionNumber"] = this.subscriptionNumber;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscription {
    balance?: Money | undefined;
    interval?: SubscriptionInterval | undefined;
    intervalCount?: number | undefined;
    trialPeriodDays?: number | undefined;
    customerOrders?: CustomerOrder[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    trialSart?: Date | undefined;
    trialEnd?: Date | undefined;
    currentPeriodStart?: Date | undefined;
    currentPeriodEnd?: Date | undefined;
    paymentMethodType?: string | undefined;
    customerName?: string | undefined;
    customerId?: string | undefined;
    channelId?: string | undefined;
    storeId?: string | undefined;
    storeName?: string | undefined;
    organizationName?: string | undefined;
    organizationId?: string | undefined;
    employeeName?: string | undefined;
    employeeId?: string | undefined;
    addresses?: Address[] | undefined;
    financialStatus?: string | undefined;
    inPayments?: PaymentIn[] | undefined;
    items?: OrderLineItem[] | undefined;
    shipments?: OrderShipment[] | undefined;
    discount?: Discount | undefined;
    taxDetails?: TaxDetail[] | undefined;
    number?: string | undefined;
    isApproved?: boolean | undefined;
    status?: string | undefined;
    comment?: string | undefined;
    currency?: Currency | undefined;
    currencyCode?: string | undefined;
    isCancelled?: boolean | undefined;
    cancelled?: boolean | undefined;
    cancelledDate?: Date | undefined;
    cancelReason?: string | undefined;
    dynamicProperties?: DynamicProperty[] | undefined;
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    discounts?: Discount[] | undefined;
    total?: Money | undefined;
    discountAmount?: Money | undefined;
    discountAmountWithTax?: Money | undefined;
    subTotal?: Money | undefined;
    subTotalWithTax?: Money | undefined;
    shippingTotal?: Money | undefined;
    shippingTotalWithTax?: Money | undefined;
    shippingTaxTotal?: Money | undefined;
    shippingPrice?: Money | undefined;
    shippingPriceWithTax?: Money | undefined;
    paymentTotal?: Money | undefined;
    paymentTotalWithTax?: Money | undefined;
    paymentPrice?: Money | undefined;
    paymentPriceWithTax?: Money | undefined;
    paymentDiscountTotal?: Money | undefined;
    paymentDiscountTotalWithTax?: Money | undefined;
    paymentTaxTotal?: Money | undefined;
    discountTotal?: Money | undefined;
    discountTotalWithTax?: Money | undefined;
    taxTotal?: Money | undefined;
    shippingDiscountTotalWithTax?: Money | undefined;
    shippingDiscountTotal?: Money | undefined;
    subTotalTaxTotal?: Money | undefined;
    subTotalDiscount?: Money | undefined;
    subTotalDiscountWithTax?: Money | undefined;
    subscriptionNumber?: string | undefined;
    id?: string | undefined;
}

export class SubscriptionCancelRequest implements ISubscriptionCancelRequest {
    customerId?: string | undefined;
    subscriptionId?: string | undefined;
    number?: string | undefined;
    cancelReason?: string | undefined;

    constructor(data?: ISubscriptionCancelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.subscriptionId = _data["subscriptionId"];
            this.number = _data["number"];
            this.cancelReason = _data["cancelReason"];
        }
    }

    static fromJS(data: any): SubscriptionCancelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionCancelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["subscriptionId"] = this.subscriptionId;
        data["number"] = this.number;
        data["cancelReason"] = this.cancelReason;
        return data; 
    }
}

export interface ISubscriptionCancelRequest {
    customerId?: string | undefined;
    subscriptionId?: string | undefined;
    number?: string | undefined;
    cancelReason?: string | undefined;
}

export class UserSession implements IUserSession {
    loadTime?: Date | undefined;
    unloadTime?: Date | undefined;
    language?: string | undefined;
    platform?: string | undefined;
    port?: string | undefined;
    clientStart?: Client | undefined;
    page?: Page | undefined;
    endpoint?: string | undefined;
    interactions?: UserEvent[] | undefined;
    clientEnd?: Client | undefined;

    constructor(data?: IUserSession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loadTime = _data["loadTime"] ? new Date(_data["loadTime"].toString()) : <any>undefined;
            this.unloadTime = _data["unloadTime"] ? new Date(_data["unloadTime"].toString()) : <any>undefined;
            this.language = _data["language"];
            this.platform = _data["platform"];
            this.port = _data["port"];
            this.clientStart = _data["clientStart"] ? Client.fromJS(_data["clientStart"]) : <any>undefined;
            this.page = _data["page"] ? Page.fromJS(_data["page"]) : <any>undefined;
            this.endpoint = _data["endpoint"];
            if (Array.isArray(_data["interactions"])) {
                this.interactions = [] as any;
                for (let item of _data["interactions"])
                    this.interactions!.push(UserEvent.fromJS(item));
            }
            this.clientEnd = _data["clientEnd"] ? Client.fromJS(_data["clientEnd"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserSession {
        data = typeof data === 'object' ? data : {};
        let result = new UserSession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loadTime"] = this.loadTime ? this.loadTime.toISOString() : <any>undefined;
        data["unloadTime"] = this.unloadTime ? this.unloadTime.toISOString() : <any>undefined;
        data["language"] = this.language;
        data["platform"] = this.platform;
        data["port"] = this.port;
        data["clientStart"] = this.clientStart ? this.clientStart.toJSON() : <any>undefined;
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        data["endpoint"] = this.endpoint;
        if (Array.isArray(this.interactions)) {
            data["interactions"] = [];
            for (let item of this.interactions)
                data["interactions"].push(item.toJSON());
        }
        data["clientEnd"] = this.clientEnd ? this.clientEnd.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserSession {
    loadTime?: Date | undefined;
    unloadTime?: Date | undefined;
    language?: string | undefined;
    platform?: string | undefined;
    port?: string | undefined;
    clientStart?: Client | undefined;
    page?: Page | undefined;
    endpoint?: string | undefined;
    interactions?: UserEvent[] | undefined;
    clientEnd?: Client | undefined;
}

export class Client implements IClient {
    name?: string | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
    outerWidth?: number | undefined;
    outerHeight?: number | undefined;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.innerWidth = _data["innerWidth"];
            this.innerHeight = _data["innerHeight"];
            this.outerWidth = _data["outerWidth"];
            this.outerHeight = _data["outerHeight"];
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["innerWidth"] = this.innerWidth;
        data["innerHeight"] = this.innerHeight;
        data["outerWidth"] = this.outerWidth;
        data["outerHeight"] = this.outerHeight;
        return data; 
    }
}

export interface IClient {
    name?: string | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
    outerWidth?: number | undefined;
    outerHeight?: number | undefined;
}

export class Page implements IPage {
    location?: string | undefined;
    href?: string | undefined;
    origin?: string | undefined;
    title?: string | undefined;

    constructor(data?: IPage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.location = _data["location"];
            this.href = _data["href"];
            this.origin = _data["origin"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): Page {
        data = typeof data === 'object' ? data : {};
        let result = new Page();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location;
        data["href"] = this.href;
        data["origin"] = this.origin;
        data["title"] = this.title;
        return data; 
    }
}

export interface IPage {
    location?: string | undefined;
    href?: string | undefined;
    origin?: string | undefined;
    title?: string | undefined;
}

export class UserEvent implements IUserEvent {
    type?: string | undefined;
    event?: string | undefined;
    targetTag?: string | undefined;
    targetClasses?: string | undefined;
    content?: string | undefined;
    createdAt?: Date | undefined;

    constructor(data?: IUserEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.event = _data["event"];
            this.targetTag = _data["targetTag"];
            this.targetClasses = _data["targetClasses"];
            this.content = _data["content"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserEvent {
        data = typeof data === 'object' ? data : {};
        let result = new UserEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["event"] = this.event;
        data["targetTag"] = this.targetTag;
        data["targetClasses"] = this.targetClasses;
        data["content"] = this.content;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserEvent {
    type?: string | undefined;
    event?: string | undefined;
    targetTag?: string | undefined;
    targetClasses?: string | undefined;
    content?: string | undefined;
    createdAt?: Date | undefined;
}

export enum RespGroup {
    None = "None",
    ItemInfo = "ItemInfo",
    ItemAssets = "ItemAssets",
    ItemProperties = "ItemProperties",
    ItemAssociations = "ItemAssociations",
    ItemEditorialReviews = "ItemEditorialReviews",
    Variations = "Variations",
    Seo = "Seo",
    Links = "Links",
    Inventory = "Inventory",
    Outlines = "Outlines",
    ReferencedAssociations = "ReferencedAssociations",
    ItemWithPrices = "ItemWithPrices",
    ItemWithDiscounts = "ItemWithDiscounts",
    ItemWithVendor = "ItemWithVendor",
    ItemWithPaymentPlan = "ItemWithPaymentPlan",
    ItemSmall = "ItemSmall",
    ItemMedium = "ItemMedium",
    ItemLarge = "ItemLarge",
    Default = "Default",
}

export enum RespGroup2 {
    None = "None",
    Info = "Info",
    WithImages = "WithImages",
    WithProperties = "WithProperties",
    WithLinks = "WithLinks",
    WithSeo = "WithSeo",
    WithParents = "WithParents",
    WithOutlines = "WithOutlines",
    Small = "Small",
    Full = "Full",
}

export enum UserState {
    PendingApproval = "PendingApproval",
    Approved = "Approved",
    Rejected = "Rejected",
}

export enum AddressType {
    Billing = "Billing",
    Shipping = "Shipping",
    BillingAndShipping = "BillingAndShipping",
}

export enum PaymentPlanInterval {
    Days = "Days",
    Weeks = "Weeks",
    Months = "Months",
    Years = "Years",
}

export enum InventoryStatus {
    Disabled = "Disabled",
    Enabled = "Enabled",
    Ignored = "Ignored",
}

export enum ProductSearchCriteriaResponseGroup {
    None = "None",
    ItemInfo = "ItemInfo",
    ItemAssets = "ItemAssets",
    ItemProperties = "ItemProperties",
    ItemAssociations = "ItemAssociations",
    ItemEditorialReviews = "ItemEditorialReviews",
    Variations = "Variations",
    Seo = "Seo",
    Links = "Links",
    Inventory = "Inventory",
    Outlines = "Outlines",
    ReferencedAssociations = "ReferencedAssociations",
    ItemWithPrices = "ItemWithPrices",
    ItemWithDiscounts = "ItemWithDiscounts",
    ItemWithVendor = "ItemWithVendor",
    ItemWithPaymentPlan = "ItemWithPaymentPlan",
    ItemSmall = "ItemSmall",
    ItemMedium = "ItemMedium",
    ItemLarge = "ItemLarge",
    Default = "Default",
}

export enum CategorySearchCriteriaResponseGroup {
    None = "None",
    Info = "Info",
    WithImages = "WithImages",
    WithProperties = "WithProperties",
    WithLinks = "WithLinks",
    WithSeo = "WithSeo",
    WithParents = "WithParents",
    WithOutlines = "WithOutlines",
    Small = "Small",
    Full = "Full",
}

export enum SubscriptionSearchCriteriaResponseGroup {
    Default = "Default",
    WithChangeLog = "WithChangeLog",
    WithOrderPrototype = "WithOrderPrototype",
    WithRelatedOrders = "WithRelatedOrders",
    Full = "Full",
}

export enum SubscriptionInterval {
    Days = "Days",
    Weeks = "Weeks",
    Months = "Months",
    Years = "Years",
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}